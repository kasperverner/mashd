//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Mashd.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MashdParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, BOOLEAN_TYPE=38, 
		INTEGER_TYPE=39, DATE_TYPE=40, DECIMAL_TYPE=41, TEXT_TYPE=42, SCHEMA_TYPE=43, 
		DATASET_TYPE=44, MASHD_TYPE=45, INTEGER=46, DECIMAL=47, BOOLEAN=48, TEXT=49, 
		ID=50, NULL=51, DATE=52, WS=53, COMMENT=54, MULTILINE_COMMENT=55;
	public const int
		RULE_program = 0, RULE_importStatement = 1, RULE_definition = 2, RULE_schemaObject = 3, 
		RULE_schemaProperties = 4, RULE_schemaProperty = 5, RULE_schemaFieldProperty = 6, 
		RULE_datasetObject = 7, RULE_datasetProperties = 8, RULE_datasetProperty = 9, 
		RULE_formalParameters = 10, RULE_statement = 11, RULE_if = 12, RULE_block = 13, 
		RULE_expression = 14, RULE_literal = 15, RULE_keyValuePair = 16, RULE_actualParameters = 17, 
		RULE_functionCall = 18, RULE_methodChain = 19, RULE_type = 20;
	public static readonly string[] ruleNames = {
		"program", "importStatement", "definition", "schemaObject", "schemaProperties", 
		"schemaProperty", "schemaFieldProperty", "datasetObject", "datasetProperties", 
		"datasetProperty", "formalParameters", "statement", "if", "block", "expression", 
		"literal", "keyValuePair", "actualParameters", "functionCall", "methodChain", 
		"type"
	};

	private static readonly string[] _LiteralNames = {
		null, "'import'", "';'", "'('", "')'", "'='", "'{'", "'}'", "','", "':'", 
		"'+='", "'-='", "'*='", "'/='", "'??='", "'return'", "'if'", "'else'", 
		"'.'", "'++'", "'--'", "'-'", "'!'", "'*'", "'/'", "'%'", "'+'", "'<'", 
		"'<='", "'>'", "'>='", "'=='", "'!='", "'??'", "'&&'", "'||'", "'?'", 
		"'&'", "'Boolean'", "'Integer'", "'Date'", "'Decimal'", "'Text'", "'Schema'", 
		"'Dataset'", "'Mashd'", null, null, null, null, null, "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "BOOLEAN_TYPE", "INTEGER_TYPE", "DATE_TYPE", "DECIMAL_TYPE", 
		"TEXT_TYPE", "SCHEMA_TYPE", "DATASET_TYPE", "MASHD_TYPE", "INTEGER", "DECIMAL", 
		"BOOLEAN", "TEXT", "ID", "NULL", "DATE", "WS", "COMMENT", "MULTILINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Mashd.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MashdParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MashdParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MashdParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MashdParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext[] importStatement() {
			return GetRuleContexts<ImportStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext importStatement(int i) {
			return GetRuleContext<ImportStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext[] definition() {
			return GetRuleContexts<DefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition(int i) {
			return GetRuleContext<DefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9006924384796746L) != 0)) {
				{
				State = 45;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 42;
					importStatement();
					}
					break;
				case 2:
					{
					State = 43;
					definition();
					}
					break;
				case 3:
					{
					State = 44;
					statement();
					}
					break;
				}
				}
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 50;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
	 
		public ImportStatementContext() { }
		public virtual void CopyFrom(ImportStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ImportDeclarationContext : ImportStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(MashdParser.TEXT, 0); }
		public ImportDeclarationContext(ImportStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterImportDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitImportDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_importStatement);
		try {
			_localctx = new ImportDeclarationContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			Match(T__0);
			State = 53;
			Match(TEXT);
			State = 54;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
	 
		public DefinitionContext() { }
		public virtual void CopyFrom(DefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SchemaDefinitionContext : DefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA_TYPE() { return GetToken(MashdParser.SCHEMA_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SchemaDefinitionContext(DefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterSchemaDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitSchemaDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchemaDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionDefinitionContext : DefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionDefinitionContext(DefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterFunctionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitFunctionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DatasetDefinitionContext : DefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATASET_TYPE() { return GetToken(MashdParser.DATASET_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DatasetDefinitionContext(DefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterDatasetDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitDatasetDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasetDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MashdDefinitionContext : DefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASHD_TYPE() { return GetToken(MashdParser.MASHD_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MashdDefinitionContext(DefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterMashdDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitMashdDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMashdDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_definition);
		try {
			State = 81;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new FunctionDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 56;
				type();
				State = 57;
				Match(ID);
				State = 58;
				Match(T__2);
				State = 59;
				formalParameters();
				State = 60;
				Match(T__3);
				State = 61;
				block();
				}
				break;
			case 2:
				_localctx = new SchemaDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 63;
				Match(SCHEMA_TYPE);
				State = 64;
				Match(ID);
				State = 65;
				Match(T__4);
				State = 66;
				expression(0);
				State = 67;
				Match(T__1);
				}
				break;
			case 3:
				_localctx = new DatasetDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 69;
				Match(DATASET_TYPE);
				State = 70;
				Match(ID);
				State = 71;
				Match(T__4);
				State = 72;
				expression(0);
				State = 73;
				Match(T__1);
				}
				break;
			case 4:
				_localctx = new MashdDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 75;
				Match(MASHD_TYPE);
				State = 76;
				Match(ID);
				State = 77;
				Match(T__4);
				State = 78;
				expression(0);
				State = 79;
				Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SchemaPropertiesContext schemaProperties() {
			return GetRuleContext<SchemaPropertiesContext>(0);
		}
		public SchemaObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schemaObject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterSchemaObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitSchemaObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchemaObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SchemaObjectContext schemaObject() {
		SchemaObjectContext _localctx = new SchemaObjectContext(Context, State);
		EnterRule(_localctx, 6, RULE_schemaObject);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			Match(T__5);
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 84;
				schemaProperties();
				}
			}

			State = 87;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaPropertiesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SchemaPropertyContext[] schemaProperty() {
			return GetRuleContexts<SchemaPropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SchemaPropertyContext schemaProperty(int i) {
			return GetRuleContext<SchemaPropertyContext>(i);
		}
		public SchemaPropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schemaProperties; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterSchemaProperties(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitSchemaProperties(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchemaProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SchemaPropertiesContext schemaProperties() {
		SchemaPropertiesContext _localctx = new SchemaPropertiesContext(Context, State);
		EnterRule(_localctx, 8, RULE_schemaProperties);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			schemaProperty();
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 90;
				Match(T__7);
				State = 91;
				schemaProperty();
				}
				}
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaPropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SchemaFieldPropertyContext[] schemaFieldProperty() {
			return GetRuleContexts<SchemaFieldPropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SchemaFieldPropertyContext schemaFieldProperty(int i) {
			return GetRuleContext<SchemaFieldPropertyContext>(i);
		}
		public SchemaPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schemaProperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterSchemaProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitSchemaProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchemaProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SchemaPropertyContext schemaProperty() {
		SchemaPropertyContext _localctx = new SchemaPropertyContext(Context, State);
		EnterRule(_localctx, 10, RULE_schemaProperty);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			Match(ID);
			State = 98;
			Match(T__8);
			State = 99;
			Match(T__5);
			State = 100;
			schemaFieldProperty();
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 101;
				Match(T__7);
				State = 102;
				schemaFieldProperty();
				}
				}
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 108;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaFieldPropertyContext : ParserRuleContext {
		public SchemaFieldPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schemaFieldProperty; } }
	 
		public SchemaFieldPropertyContext() { }
		public virtual void CopyFrom(SchemaFieldPropertyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SchemaTypeContext : SchemaFieldPropertyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public SchemaTypeContext(SchemaFieldPropertyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterSchemaType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitSchemaType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchemaType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SchemaNameContext : SchemaFieldPropertyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(MashdParser.TEXT, 0); }
		public SchemaNameContext(SchemaFieldPropertyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterSchemaName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitSchemaName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchemaName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SchemaFieldPropertyContext schemaFieldProperty() {
		SchemaFieldPropertyContext _localctx = new SchemaFieldPropertyContext(Context, State);
		EnterRule(_localctx, 12, RULE_schemaFieldProperty);
		try {
			State = 116;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				_localctx = new SchemaTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 110;
				Match(ID);
				State = 111;
				Match(T__8);
				State = 112;
				type();
				}
				break;
			case 2:
				_localctx = new SchemaNameContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 113;
				Match(ID);
				State = 114;
				Match(T__8);
				State = 115;
				Match(TEXT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasetObjectContext : ParserRuleContext {
		public DatasetObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasetObject; } }
	 
		public DatasetObjectContext() { }
		public virtual void CopyFrom(DatasetObjectContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DatasetObjectExpressionContext : DatasetObjectContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasetPropertiesContext datasetProperties() {
			return GetRuleContext<DatasetPropertiesContext>(0);
		}
		public DatasetObjectExpressionContext(DatasetObjectContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterDatasetObjectExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitDatasetObjectExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasetObjectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasetObjectContext datasetObject() {
		DatasetObjectContext _localctx = new DatasetObjectContext(Context, State);
		EnterRule(_localctx, 14, RULE_datasetObject);
		int _la;
		try {
			_localctx = new DatasetObjectExpressionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			Match(T__5);
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 119;
				datasetProperties();
				}
			}

			State = 122;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasetPropertiesContext : ParserRuleContext {
		public DatasetPropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasetProperties; } }
	 
		public DatasetPropertiesContext() { }
		public virtual void CopyFrom(DatasetPropertiesContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DatasetPropertyListContext : DatasetPropertiesContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasetPropertyContext[] datasetProperty() {
			return GetRuleContexts<DatasetPropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasetPropertyContext datasetProperty(int i) {
			return GetRuleContext<DatasetPropertyContext>(i);
		}
		public DatasetPropertyListContext(DatasetPropertiesContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterDatasetPropertyList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitDatasetPropertyList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasetPropertyList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasetPropertiesContext datasetProperties() {
		DatasetPropertiesContext _localctx = new DatasetPropertiesContext(Context, State);
		EnterRule(_localctx, 16, RULE_datasetProperties);
		int _la;
		try {
			_localctx = new DatasetPropertyListContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			datasetProperty();
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 125;
				Match(T__7);
				State = 126;
				datasetProperty();
				}
				}
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasetPropertyContext : ParserRuleContext {
		public DatasetPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasetProperty; } }
	 
		public DatasetPropertyContext() { }
		public virtual void CopyFrom(DatasetPropertyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DatasetSkipContext : DatasetPropertyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(MashdParser.INTEGER, 0); }
		public DatasetSkipContext(DatasetPropertyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterDatasetSkip(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitDatasetSkip(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasetSkip(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DatabaseQueryContext : DatasetPropertyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(MashdParser.TEXT, 0); }
		public DatabaseQueryContext(DatasetPropertyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterDatabaseQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitDatabaseQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabaseQuery(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DatasetSchemaContext : DatasetPropertyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(MashdParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(MashdParser.ID, i);
		}
		public DatasetSchemaContext(DatasetPropertyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterDatasetSchema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitDatasetSchema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasetSchema(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DatasetAdapterContext : DatasetPropertyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(MashdParser.TEXT, 0); }
		public DatasetAdapterContext(DatasetPropertyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterDatasetAdapter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitDatasetAdapter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasetAdapter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CsvDelimiterContext : DatasetPropertyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(MashdParser.TEXT, 0); }
		public CsvDelimiterContext(DatasetPropertyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterCsvDelimiter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitCsvDelimiter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCsvDelimiter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DatasetSourceContext : DatasetPropertyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(MashdParser.TEXT, 0); }
		public DatasetSourceContext(DatasetPropertyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterDatasetSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitDatasetSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasetSource(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DatasetLimitContext : DatasetPropertyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(MashdParser.INTEGER, 0); }
		public DatasetLimitContext(DatasetPropertyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterDatasetLimit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitDatasetLimit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasetLimit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasetPropertyContext datasetProperty() {
		DatasetPropertyContext _localctx = new DatasetPropertyContext(Context, State);
		EnterRule(_localctx, 18, RULE_datasetProperty);
		try {
			State = 153;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				_localctx = new DatasetAdapterContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 132;
				Match(ID);
				State = 133;
				Match(T__8);
				State = 134;
				Match(TEXT);
				}
				break;
			case 2:
				_localctx = new DatasetSourceContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 135;
				Match(ID);
				State = 136;
				Match(T__8);
				State = 137;
				Match(TEXT);
				}
				break;
			case 3:
				_localctx = new DatasetSchemaContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 138;
				Match(ID);
				State = 139;
				Match(T__8);
				State = 140;
				Match(ID);
				}
				break;
			case 4:
				_localctx = new CsvDelimiterContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 141;
				Match(ID);
				State = 142;
				Match(T__8);
				State = 143;
				Match(TEXT);
				}
				break;
			case 5:
				_localctx = new DatabaseQueryContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 144;
				Match(ID);
				State = 145;
				Match(T__8);
				State = 146;
				Match(TEXT);
				}
				break;
			case 6:
				_localctx = new DatasetSkipContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 147;
				Match(ID);
				State = 148;
				Match(T__8);
				State = 149;
				Match(INTEGER);
				}
				break;
			case 7:
				_localctx = new DatasetLimitContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 150;
				Match(ID);
				State = 151;
				Match(T__8);
				State = 152;
				Match(INTEGER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParametersContext : ParserRuleContext {
		public FormalParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameters; } }
	 
		public FormalParametersContext() { }
		public virtual void CopyFrom(FormalParametersContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParameterListContext : FormalParametersContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(MashdParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(MashdParser.ID, i);
		}
		public ParameterListContext(FormalParametersContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParametersContext formalParameters() {
		FormalParametersContext _localctx = new FormalParametersContext(Context, State);
		EnterRule(_localctx, 20, RULE_formalParameters);
		int _la;
		try {
			_localctx = new ParameterListContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 70093866270720L) != 0)) {
				{
				State = 155;
				type();
				State = 156;
				Match(ID);
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__7) {
					{
					{
					State = 157;
					Match(T__7);
					State = 158;
					type();
					State = 159;
					Match(ID);
					}
					}
					State = 165;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssignmentContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullCoalescingAssignmentContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NullCoalescingAssignmentContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterNullCoalescingAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitNullCoalescingAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullCoalescingAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddAssignmentContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AddAssignmentContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterAddAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitAddAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivisionAssignmentContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DivisionAssignmentContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterDivisionAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitDivisionAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivisionAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclarationContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplyAssignmentContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MultiplyAssignmentContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterMultiplyAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitMultiplyAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubtractAssignmentContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SubtractAssignmentContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterSubtractAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitSubtractAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtractAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_statement);
		int _la;
		try {
			State = 214;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 168;
				@if();
				}
				break;
			case 2:
				_localctx = new VariableDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 169;
				type();
				State = 170;
				Match(ID);
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__4) {
					{
					State = 171;
					Match(T__4);
					State = 172;
					expression(0);
					}
				}

				State = 175;
				Match(T__1);
				}
				break;
			case 3:
				_localctx = new AssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 177;
				Match(ID);
				State = 178;
				Match(T__4);
				State = 179;
				expression(0);
				State = 180;
				Match(T__1);
				}
				break;
			case 4:
				_localctx = new AddAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 182;
				Match(ID);
				State = 183;
				Match(T__9);
				State = 184;
				expression(0);
				State = 185;
				Match(T__1);
				}
				break;
			case 5:
				_localctx = new SubtractAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 187;
				Match(ID);
				State = 188;
				Match(T__10);
				State = 189;
				expression(0);
				State = 190;
				Match(T__1);
				}
				break;
			case 6:
				_localctx = new MultiplyAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 192;
				Match(ID);
				State = 193;
				Match(T__11);
				State = 194;
				expression(0);
				State = 195;
				Match(T__1);
				}
				break;
			case 7:
				_localctx = new DivisionAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 197;
				Match(ID);
				State = 198;
				Match(T__12);
				State = 199;
				expression(0);
				State = 200;
				Match(T__1);
				}
				break;
			case 8:
				_localctx = new NullCoalescingAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 202;
				Match(ID);
				State = 203;
				Match(T__13);
				State = 204;
				expression(0);
				State = 205;
				Match(T__1);
				}
				break;
			case 9:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 207;
				Match(T__14);
				State = 208;
				expression(0);
				State = 209;
				Match(T__1);
				}
				break;
			case 10:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 211;
				expression(0);
				State = 212;
				Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
	 
		public IfContext() { }
		public virtual void CopyFrom(IfContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfDefinitionContext : IfContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		public IfDefinitionContext(IfContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterIfDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitIfDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 24, RULE_if);
		int _la;
		try {
			_localctx = new IfDefinitionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			Match(T__15);
			State = 217;
			Match(T__2);
			State = 218;
			expression(0);
			State = 219;
			Match(T__3);
			State = 220;
			block();
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 221;
				Match(T__16);
				State = 224;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__5:
					{
					State = 222;
					block();
					}
					break;
				case T__15:
					{
					State = 223;
					@if();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	 
		public BlockContext() { }
		public virtual void CopyFrom(BlockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockDefinitionContext : BlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockDefinitionContext(BlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterBlockDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitBlockDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 26, RULE_block);
		int _la;
		try {
			_localctx = new BlockDefinitionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			Match(T__5);
			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9006924384796744L) != 0)) {
				{
				{
				State = 229;
				statement();
				}
				}
				State = 234;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 235;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TernaryExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TernaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterTernaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitTernaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicalAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreIncrementExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PreIncrementExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterPreIncrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitPreIncrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicalOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterThanExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public GreaterThanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterGreaterThanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitGreaterThanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterThanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InequalityExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public InequalityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterInequalityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitInequalityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInequalityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DatasetCombineExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DatasetCombineExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterDatasetCombineExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitDatasetCombineExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasetCombineExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodChainContext methodChain() {
			return GetRuleContext<MethodChainContext>(0);
		}
		public MethodCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterMethodCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitMethodCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivisionExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DivisionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterDivisionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitDivisionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivisionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostDecrementExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PostDecrementExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterPostDecrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitPostDecrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostDecrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegationExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NegationExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterNegationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitNegationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AdditionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterAdditionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitAdditionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostIncrementExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PostIncrementExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterPostIncrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitPostIncrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreDecrementExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PreDecrementExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterPreDecrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitPreDecrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreDecrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterTypeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitTypeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubtractionExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SubtractionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterSubtractionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitSubtractionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtractionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LessThanEqualExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LessThanEqualExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterLessThanEqualExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitLessThanEqualExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessThanEqualExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterParenExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitParenExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropertyAccessExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		public PropertyAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterPropertyAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitPropertyAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplicationExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterMultiplicationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitMultiplicationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullishCoalescingExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NullishCoalescingExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterNullishCoalescingExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitNullishCoalescingExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullishCoalescingExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyValuePairContext[] keyValuePair() {
			return GetRuleContexts<KeyValuePairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyValuePairContext keyValuePair(int i) {
			return GetRuleContext<KeyValuePairContext>(i);
		}
		public ObjectExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterObjectExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitObjectExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModuloExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ModuloExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterModuloExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitModuloExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuloExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LessThanExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LessThanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterLessThanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitLessThanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessThanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterThanEqualExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public GreaterThanEqualExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterGreaterThanEqualExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitGreaterThanEqualExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterThanEqualExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 238;
				literal();
				}
				break;
			case 2:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 239;
				Match(ID);
				}
				break;
			case 3:
				{
				_localctx = new TypeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 240;
				type();
				}
				break;
			case 4:
				{
				_localctx = new ParenExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 241;
				Match(T__2);
				State = 242;
				expression(0);
				State = 243;
				Match(T__3);
				}
				break;
			case 5:
				{
				_localctx = new FunctionCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 245;
				functionCall();
				}
				break;
			case 6:
				{
				_localctx = new PreIncrementExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 246;
				Match(T__18);
				State = 247;
				expression(21);
				}
				break;
			case 7:
				{
				_localctx = new PreDecrementExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 248;
				Match(T__19);
				State = 249;
				expression(20);
				}
				break;
			case 8:
				{
				_localctx = new NegationExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 250;
				Match(T__20);
				State = 251;
				expression(19);
				}
				break;
			case 9:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 252;
				Match(T__21);
				State = 253;
				expression(18);
				}
				break;
			case 10:
				{
				_localctx = new ObjectExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 254;
				Match(T__5);
				State = 263;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ID) {
					{
					State = 255;
					keyValuePair();
					State = 260;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__7) {
						{
						{
						State = 256;
						Match(T__7);
						State = 257;
						keyValuePair();
						}
						}
						State = 262;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 265;
				Match(T__6);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 331;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 329;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
					case 1:
						{
						_localctx = new MultiplicationExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 268;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 269;
						Match(T__22);
						State = 270;
						expression(18);
						}
						break;
					case 2:
						{
						_localctx = new DivisionExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 271;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 272;
						Match(T__23);
						State = 273;
						expression(17);
						}
						break;
					case 3:
						{
						_localctx = new ModuloExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 274;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 275;
						Match(T__24);
						State = 276;
						expression(16);
						}
						break;
					case 4:
						{
						_localctx = new AdditionExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 277;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 278;
						Match(T__25);
						State = 279;
						expression(15);
						}
						break;
					case 5:
						{
						_localctx = new SubtractionExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 280;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 281;
						Match(T__20);
						State = 282;
						expression(14);
						}
						break;
					case 6:
						{
						_localctx = new LessThanExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 283;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 284;
						Match(T__26);
						State = 285;
						expression(13);
						}
						break;
					case 7:
						{
						_localctx = new LessThanEqualExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 286;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 287;
						Match(T__27);
						State = 288;
						expression(12);
						}
						break;
					case 8:
						{
						_localctx = new GreaterThanExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 289;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 290;
						Match(T__28);
						State = 291;
						expression(11);
						}
						break;
					case 9:
						{
						_localctx = new GreaterThanEqualExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 292;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 293;
						Match(T__29);
						State = 294;
						expression(10);
						}
						break;
					case 10:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 295;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 296;
						Match(T__30);
						State = 297;
						expression(9);
						}
						break;
					case 11:
						{
						_localctx = new InequalityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 298;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 299;
						Match(T__31);
						State = 300;
						expression(8);
						}
						break;
					case 12:
						{
						_localctx = new NullishCoalescingExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 301;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 302;
						Match(T__32);
						State = 303;
						expression(7);
						}
						break;
					case 13:
						{
						_localctx = new LogicalAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 304;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 305;
						Match(T__33);
						State = 306;
						expression(6);
						}
						break;
					case 14:
						{
						_localctx = new LogicalOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 307;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 308;
						Match(T__34);
						State = 309;
						expression(5);
						}
						break;
					case 15:
						{
						_localctx = new TernaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 310;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 311;
						Match(T__35);
						State = 312;
						expression(0);
						State = 313;
						Match(T__8);
						State = 314;
						expression(4);
						}
						break;
					case 16:
						{
						_localctx = new DatasetCombineExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 316;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 317;
						Match(T__36);
						State = 318;
						expression(3);
						}
						break;
					case 17:
						{
						_localctx = new PropertyAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 319;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 320;
						Match(T__17);
						State = 321;
						Match(ID);
						}
						break;
					case 18:
						{
						_localctx = new MethodCallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 322;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 323;
						Match(T__17);
						State = 324;
						methodChain();
						}
						break;
					case 19:
						{
						_localctx = new PostIncrementExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 325;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 326;
						Match(T__18);
						}
						break;
					case 20:
						{
						_localctx = new PostDecrementExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 327;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 328;
						Match(T__19);
						}
						break;
					}
					} 
				}
				State = 333;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DateLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(MashdParser.DATE, 0); }
		public DateLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterDateLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitDateLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(MashdParser.BOOLEAN, 0); }
		public BooleanLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DatasetObjectLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasetObjectContext datasetObject() {
			return GetRuleContext<DatasetObjectContext>(0);
		}
		public DatasetObjectLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterDatasetObjectLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitDatasetObjectLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasetObjectLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecimalLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(MashdParser.DECIMAL, 0); }
		public DecimalLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterDecimalLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitDecimalLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TextLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(MashdParser.TEXT, 0); }
		public TextLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterTextLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitTextLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(MashdParser.NULL, 0); }
		public NullLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntegerLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(MashdParser.INTEGER, 0); }
		public IntegerLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SchemaObjectLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public SchemaObjectContext schemaObject() {
			return GetRuleContext<SchemaObjectContext>(0);
		}
		public SchemaObjectLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterSchemaObjectLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitSchemaObjectLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchemaObjectLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 30, RULE_literal);
		try {
			State = 342;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				_localctx = new BooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 334;
				Match(BOOLEAN);
				}
				break;
			case 2:
				_localctx = new IntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 335;
				Match(INTEGER);
				}
				break;
			case 3:
				_localctx = new DateLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 336;
				Match(DATE);
				}
				break;
			case 4:
				_localctx = new DecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 337;
				Match(DECIMAL);
				}
				break;
			case 5:
				_localctx = new TextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 338;
				Match(TEXT);
				}
				break;
			case 6:
				_localctx = new SchemaObjectLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 339;
				schemaObject();
				}
				break;
			case 7:
				_localctx = new DatasetObjectLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 340;
				datasetObject();
				}
				break;
			case 8:
				_localctx = new NullLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 341;
				Match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyValuePairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public KeyValuePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyValuePair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterKeyValuePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitKeyValuePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyValuePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyValuePairContext keyValuePair() {
		KeyValuePairContext _localctx = new KeyValuePairContext(Context, State);
		EnterRule(_localctx, 32, RULE_keyValuePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344;
			Match(ID);
			State = 345;
			Match(T__8);
			State = 346;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ActualParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actualParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterActualParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitActualParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActualParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActualParametersContext actualParameters() {
		ActualParametersContext _localctx = new ActualParametersContext(Context, State);
		EnterRule(_localctx, 34, RULE_actualParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			expression(0);
			State = 353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 349;
				Match(T__7);
				State = 350;
				expression(0);
				}
				}
				State = 355;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActualParametersContext actualParameters() {
			return GetRuleContext<ActualParametersContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 36, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356;
			Match(ID);
			State = 357;
			Match(T__2);
			State = 359;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9006924384698440L) != 0)) {
				{
				State = 358;
				actualParameters();
				}
			}

			State = 361;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodChainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodChainContext methodChain() {
			return GetRuleContext<MethodChainContext>(0);
		}
		public MethodChainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodChain; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterMethodChain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitMethodChain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodChain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodChainContext methodChain() {
		MethodChainContext _localctx = new MethodChainContext(Context, State);
		EnterRule(_localctx, 38, RULE_methodChain);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363;
			functionCall();
			State = 366;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 364;
				Match(T__17);
				State = 365;
				methodChain();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_TYPE() { return GetToken(MashdParser.BOOLEAN_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_TYPE() { return GetToken(MashdParser.INTEGER_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_TYPE() { return GetToken(MashdParser.DATE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_TYPE() { return GetToken(MashdParser.DECIMAL_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_TYPE() { return GetToken(MashdParser.TEXT_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA_TYPE() { return GetToken(MashdParser.SCHEMA_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATASET_TYPE() { return GetToken(MashdParser.DATASET_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASHD_TYPE() { return GetToken(MashdParser.MASHD_TYPE, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 40, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 70093866270720L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 17);
		case 1: return Precpred(Context, 16);
		case 2: return Precpred(Context, 15);
		case 3: return Precpred(Context, 14);
		case 4: return Precpred(Context, 13);
		case 5: return Precpred(Context, 12);
		case 6: return Precpred(Context, 11);
		case 7: return Precpred(Context, 10);
		case 8: return Precpred(Context, 9);
		case 9: return Precpred(Context, 8);
		case 10: return Precpred(Context, 7);
		case 11: return Precpred(Context, 6);
		case 12: return Precpred(Context, 5);
		case 13: return Precpred(Context, 4);
		case 14: return Precpred(Context, 3);
		case 15: return Precpred(Context, 2);
		case 16: return Precpred(Context, 25);
		case 17: return Precpred(Context, 24);
		case 18: return Precpred(Context, 23);
		case 19: return Precpred(Context, 22);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,55,371,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,1,0,1,0,1,
		0,5,0,46,8,0,10,0,12,0,49,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,3,2,82,8,2,1,3,1,3,3,3,86,8,3,1,3,1,3,1,4,1,4,1,4,5,4,93,
		8,4,10,4,12,4,96,9,4,1,5,1,5,1,5,1,5,1,5,1,5,5,5,104,8,5,10,5,12,5,107,
		9,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,3,6,117,8,6,1,7,1,7,3,7,121,8,7,1,
		7,1,7,1,8,1,8,1,8,5,8,128,8,8,10,8,12,8,131,9,8,1,9,1,9,1,9,1,9,1,9,1,
		9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,154,
		8,9,1,10,1,10,1,10,1,10,1,10,1,10,5,10,162,8,10,10,10,12,10,165,9,10,3,
		10,167,8,10,1,11,1,11,1,11,1,11,1,11,3,11,174,8,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,215,8,11,1,12,1,12,1,12,1,12,1,
		12,1,12,1,12,1,12,3,12,225,8,12,3,12,227,8,12,1,13,1,13,5,13,231,8,13,
		10,13,12,13,234,9,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,5,14,
		259,8,14,10,14,12,14,262,9,14,3,14,264,8,14,1,14,3,14,267,8,14,1,14,1,
		14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,14,1,14,5,14,330,8,14,10,14,12,14,333,9,14,1,15,1,15,1,15,1,
		15,1,15,1,15,1,15,1,15,3,15,343,8,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,
		5,17,352,8,17,10,17,12,17,355,9,17,1,18,1,18,1,18,3,18,360,8,18,1,18,1,
		18,1,19,1,19,1,19,3,19,367,8,19,1,20,1,20,1,20,0,1,28,21,0,2,4,6,8,10,
		12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,0,1,1,0,38,45,423,0,47,1,
		0,0,0,2,52,1,0,0,0,4,81,1,0,0,0,6,83,1,0,0,0,8,89,1,0,0,0,10,97,1,0,0,
		0,12,116,1,0,0,0,14,118,1,0,0,0,16,124,1,0,0,0,18,153,1,0,0,0,20,166,1,
		0,0,0,22,214,1,0,0,0,24,216,1,0,0,0,26,228,1,0,0,0,28,266,1,0,0,0,30,342,
		1,0,0,0,32,344,1,0,0,0,34,348,1,0,0,0,36,356,1,0,0,0,38,363,1,0,0,0,40,
		368,1,0,0,0,42,46,3,2,1,0,43,46,3,4,2,0,44,46,3,22,11,0,45,42,1,0,0,0,
		45,43,1,0,0,0,45,44,1,0,0,0,46,49,1,0,0,0,47,45,1,0,0,0,47,48,1,0,0,0,
		48,50,1,0,0,0,49,47,1,0,0,0,50,51,5,0,0,1,51,1,1,0,0,0,52,53,5,1,0,0,53,
		54,5,49,0,0,54,55,5,2,0,0,55,3,1,0,0,0,56,57,3,40,20,0,57,58,5,50,0,0,
		58,59,5,3,0,0,59,60,3,20,10,0,60,61,5,4,0,0,61,62,3,26,13,0,62,82,1,0,
		0,0,63,64,5,43,0,0,64,65,5,50,0,0,65,66,5,5,0,0,66,67,3,28,14,0,67,68,
		5,2,0,0,68,82,1,0,0,0,69,70,5,44,0,0,70,71,5,50,0,0,71,72,5,5,0,0,72,73,
		3,28,14,0,73,74,5,2,0,0,74,82,1,0,0,0,75,76,5,45,0,0,76,77,5,50,0,0,77,
		78,5,5,0,0,78,79,3,28,14,0,79,80,5,2,0,0,80,82,1,0,0,0,81,56,1,0,0,0,81,
		63,1,0,0,0,81,69,1,0,0,0,81,75,1,0,0,0,82,5,1,0,0,0,83,85,5,6,0,0,84,86,
		3,8,4,0,85,84,1,0,0,0,85,86,1,0,0,0,86,87,1,0,0,0,87,88,5,7,0,0,88,7,1,
		0,0,0,89,94,3,10,5,0,90,91,5,8,0,0,91,93,3,10,5,0,92,90,1,0,0,0,93,96,
		1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,9,1,0,0,0,96,94,1,0,0,0,97,98,5,
		50,0,0,98,99,5,9,0,0,99,100,5,6,0,0,100,105,3,12,6,0,101,102,5,8,0,0,102,
		104,3,12,6,0,103,101,1,0,0,0,104,107,1,0,0,0,105,103,1,0,0,0,105,106,1,
		0,0,0,106,108,1,0,0,0,107,105,1,0,0,0,108,109,5,7,0,0,109,11,1,0,0,0,110,
		111,5,50,0,0,111,112,5,9,0,0,112,117,3,40,20,0,113,114,5,50,0,0,114,115,
		5,9,0,0,115,117,5,49,0,0,116,110,1,0,0,0,116,113,1,0,0,0,117,13,1,0,0,
		0,118,120,5,6,0,0,119,121,3,16,8,0,120,119,1,0,0,0,120,121,1,0,0,0,121,
		122,1,0,0,0,122,123,5,7,0,0,123,15,1,0,0,0,124,129,3,18,9,0,125,126,5,
		8,0,0,126,128,3,18,9,0,127,125,1,0,0,0,128,131,1,0,0,0,129,127,1,0,0,0,
		129,130,1,0,0,0,130,17,1,0,0,0,131,129,1,0,0,0,132,133,5,50,0,0,133,134,
		5,9,0,0,134,154,5,49,0,0,135,136,5,50,0,0,136,137,5,9,0,0,137,154,5,49,
		0,0,138,139,5,50,0,0,139,140,5,9,0,0,140,154,5,50,0,0,141,142,5,50,0,0,
		142,143,5,9,0,0,143,154,5,49,0,0,144,145,5,50,0,0,145,146,5,9,0,0,146,
		154,5,49,0,0,147,148,5,50,0,0,148,149,5,9,0,0,149,154,5,46,0,0,150,151,
		5,50,0,0,151,152,5,9,0,0,152,154,5,46,0,0,153,132,1,0,0,0,153,135,1,0,
		0,0,153,138,1,0,0,0,153,141,1,0,0,0,153,144,1,0,0,0,153,147,1,0,0,0,153,
		150,1,0,0,0,154,19,1,0,0,0,155,156,3,40,20,0,156,163,5,50,0,0,157,158,
		5,8,0,0,158,159,3,40,20,0,159,160,5,50,0,0,160,162,1,0,0,0,161,157,1,0,
		0,0,162,165,1,0,0,0,163,161,1,0,0,0,163,164,1,0,0,0,164,167,1,0,0,0,165,
		163,1,0,0,0,166,155,1,0,0,0,166,167,1,0,0,0,167,21,1,0,0,0,168,215,3,24,
		12,0,169,170,3,40,20,0,170,173,5,50,0,0,171,172,5,5,0,0,172,174,3,28,14,
		0,173,171,1,0,0,0,173,174,1,0,0,0,174,175,1,0,0,0,175,176,5,2,0,0,176,
		215,1,0,0,0,177,178,5,50,0,0,178,179,5,5,0,0,179,180,3,28,14,0,180,181,
		5,2,0,0,181,215,1,0,0,0,182,183,5,50,0,0,183,184,5,10,0,0,184,185,3,28,
		14,0,185,186,5,2,0,0,186,215,1,0,0,0,187,188,5,50,0,0,188,189,5,11,0,0,
		189,190,3,28,14,0,190,191,5,2,0,0,191,215,1,0,0,0,192,193,5,50,0,0,193,
		194,5,12,0,0,194,195,3,28,14,0,195,196,5,2,0,0,196,215,1,0,0,0,197,198,
		5,50,0,0,198,199,5,13,0,0,199,200,3,28,14,0,200,201,5,2,0,0,201,215,1,
		0,0,0,202,203,5,50,0,0,203,204,5,14,0,0,204,205,3,28,14,0,205,206,5,2,
		0,0,206,215,1,0,0,0,207,208,5,15,0,0,208,209,3,28,14,0,209,210,5,2,0,0,
		210,215,1,0,0,0,211,212,3,28,14,0,212,213,5,2,0,0,213,215,1,0,0,0,214,
		168,1,0,0,0,214,169,1,0,0,0,214,177,1,0,0,0,214,182,1,0,0,0,214,187,1,
		0,0,0,214,192,1,0,0,0,214,197,1,0,0,0,214,202,1,0,0,0,214,207,1,0,0,0,
		214,211,1,0,0,0,215,23,1,0,0,0,216,217,5,16,0,0,217,218,5,3,0,0,218,219,
		3,28,14,0,219,220,5,4,0,0,220,226,3,26,13,0,221,224,5,17,0,0,222,225,3,
		26,13,0,223,225,3,24,12,0,224,222,1,0,0,0,224,223,1,0,0,0,225,227,1,0,
		0,0,226,221,1,0,0,0,226,227,1,0,0,0,227,25,1,0,0,0,228,232,5,6,0,0,229,
		231,3,22,11,0,230,229,1,0,0,0,231,234,1,0,0,0,232,230,1,0,0,0,232,233,
		1,0,0,0,233,235,1,0,0,0,234,232,1,0,0,0,235,236,5,7,0,0,236,27,1,0,0,0,
		237,238,6,14,-1,0,238,267,3,30,15,0,239,267,5,50,0,0,240,267,3,40,20,0,
		241,242,5,3,0,0,242,243,3,28,14,0,243,244,5,4,0,0,244,267,1,0,0,0,245,
		267,3,36,18,0,246,247,5,19,0,0,247,267,3,28,14,21,248,249,5,20,0,0,249,
		267,3,28,14,20,250,251,5,21,0,0,251,267,3,28,14,19,252,253,5,22,0,0,253,
		267,3,28,14,18,254,263,5,6,0,0,255,260,3,32,16,0,256,257,5,8,0,0,257,259,
		3,32,16,0,258,256,1,0,0,0,259,262,1,0,0,0,260,258,1,0,0,0,260,261,1,0,
		0,0,261,264,1,0,0,0,262,260,1,0,0,0,263,255,1,0,0,0,263,264,1,0,0,0,264,
		265,1,0,0,0,265,267,5,7,0,0,266,237,1,0,0,0,266,239,1,0,0,0,266,240,1,
		0,0,0,266,241,1,0,0,0,266,245,1,0,0,0,266,246,1,0,0,0,266,248,1,0,0,0,
		266,250,1,0,0,0,266,252,1,0,0,0,266,254,1,0,0,0,267,331,1,0,0,0,268,269,
		10,17,0,0,269,270,5,23,0,0,270,330,3,28,14,18,271,272,10,16,0,0,272,273,
		5,24,0,0,273,330,3,28,14,17,274,275,10,15,0,0,275,276,5,25,0,0,276,330,
		3,28,14,16,277,278,10,14,0,0,278,279,5,26,0,0,279,330,3,28,14,15,280,281,
		10,13,0,0,281,282,5,21,0,0,282,330,3,28,14,14,283,284,10,12,0,0,284,285,
		5,27,0,0,285,330,3,28,14,13,286,287,10,11,0,0,287,288,5,28,0,0,288,330,
		3,28,14,12,289,290,10,10,0,0,290,291,5,29,0,0,291,330,3,28,14,11,292,293,
		10,9,0,0,293,294,5,30,0,0,294,330,3,28,14,10,295,296,10,8,0,0,296,297,
		5,31,0,0,297,330,3,28,14,9,298,299,10,7,0,0,299,300,5,32,0,0,300,330,3,
		28,14,8,301,302,10,6,0,0,302,303,5,33,0,0,303,330,3,28,14,7,304,305,10,
		5,0,0,305,306,5,34,0,0,306,330,3,28,14,6,307,308,10,4,0,0,308,309,5,35,
		0,0,309,330,3,28,14,5,310,311,10,3,0,0,311,312,5,36,0,0,312,313,3,28,14,
		0,313,314,5,9,0,0,314,315,3,28,14,4,315,330,1,0,0,0,316,317,10,2,0,0,317,
		318,5,37,0,0,318,330,3,28,14,3,319,320,10,25,0,0,320,321,5,18,0,0,321,
		330,5,50,0,0,322,323,10,24,0,0,323,324,5,18,0,0,324,330,3,38,19,0,325,
		326,10,23,0,0,326,330,5,19,0,0,327,328,10,22,0,0,328,330,5,20,0,0,329,
		268,1,0,0,0,329,271,1,0,0,0,329,274,1,0,0,0,329,277,1,0,0,0,329,280,1,
		0,0,0,329,283,1,0,0,0,329,286,1,0,0,0,329,289,1,0,0,0,329,292,1,0,0,0,
		329,295,1,0,0,0,329,298,1,0,0,0,329,301,1,0,0,0,329,304,1,0,0,0,329,307,
		1,0,0,0,329,310,1,0,0,0,329,316,1,0,0,0,329,319,1,0,0,0,329,322,1,0,0,
		0,329,325,1,0,0,0,329,327,1,0,0,0,330,333,1,0,0,0,331,329,1,0,0,0,331,
		332,1,0,0,0,332,29,1,0,0,0,333,331,1,0,0,0,334,343,5,48,0,0,335,343,5,
		46,0,0,336,343,5,52,0,0,337,343,5,47,0,0,338,343,5,49,0,0,339,343,3,6,
		3,0,340,343,3,14,7,0,341,343,5,51,0,0,342,334,1,0,0,0,342,335,1,0,0,0,
		342,336,1,0,0,0,342,337,1,0,0,0,342,338,1,0,0,0,342,339,1,0,0,0,342,340,
		1,0,0,0,342,341,1,0,0,0,343,31,1,0,0,0,344,345,5,50,0,0,345,346,5,9,0,
		0,346,347,3,28,14,0,347,33,1,0,0,0,348,353,3,28,14,0,349,350,5,8,0,0,350,
		352,3,28,14,0,351,349,1,0,0,0,352,355,1,0,0,0,353,351,1,0,0,0,353,354,
		1,0,0,0,354,35,1,0,0,0,355,353,1,0,0,0,356,357,5,50,0,0,357,359,5,3,0,
		0,358,360,3,34,17,0,359,358,1,0,0,0,359,360,1,0,0,0,360,361,1,0,0,0,361,
		362,5,4,0,0,362,37,1,0,0,0,363,366,3,36,18,0,364,365,5,18,0,0,365,367,
		3,38,19,0,366,364,1,0,0,0,366,367,1,0,0,0,367,39,1,0,0,0,368,369,7,0,0,
		0,369,41,1,0,0,0,26,45,47,81,85,94,105,116,120,129,153,163,166,173,214,
		224,226,232,260,263,266,329,331,342,353,359,366
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
