//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Mashd.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IMashdListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class MashdBaseListener : IMashdListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="MashdParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProgram([NotNull] MashdParser.ProgramContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MashdParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProgram([NotNull] MashdParser.ProgramContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ImportDeclaration</c>
	/// labeled alternative in <see cref="MashdParser.importStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterImportDeclaration([NotNull] MashdParser.ImportDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ImportDeclaration</c>
	/// labeled alternative in <see cref="MashdParser.importStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitImportDeclaration([NotNull] MashdParser.ImportDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>FunctionDefinition</c>
	/// labeled alternative in <see cref="MashdParser.definition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionDefinition([NotNull] MashdParser.FunctionDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>FunctionDefinition</c>
	/// labeled alternative in <see cref="MashdParser.definition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionDefinition([NotNull] MashdParser.FunctionDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>VariableDefinition</c>
	/// labeled alternative in <see cref="MashdParser.definition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariableDefinition([NotNull] MashdParser.VariableDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>VariableDefinition</c>
	/// labeled alternative in <see cref="MashdParser.definition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariableDefinition([NotNull] MashdParser.VariableDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ParameterList</c>
	/// labeled alternative in <see cref="MashdParser.formalParameters"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParameterList([NotNull] MashdParser.ParameterListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ParameterList</c>
	/// labeled alternative in <see cref="MashdParser.formalParameters"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParameterList([NotNull] MashdParser.ParameterListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BlockStatement</c>
	/// labeled alternative in <see cref="MashdParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlockStatement([NotNull] MashdParser.BlockStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BlockStatement</c>
	/// labeled alternative in <see cref="MashdParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlockStatement([NotNull] MashdParser.BlockStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>IfStatement</c>
	/// labeled alternative in <see cref="MashdParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfStatement([NotNull] MashdParser.IfStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IfStatement</c>
	/// labeled alternative in <see cref="MashdParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfStatement([NotNull] MashdParser.IfStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>VariableDeclaration</c>
	/// labeled alternative in <see cref="MashdParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariableDeclaration([NotNull] MashdParser.VariableDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>VariableDeclaration</c>
	/// labeled alternative in <see cref="MashdParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariableDeclaration([NotNull] MashdParser.VariableDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Assignment</c>
	/// labeled alternative in <see cref="MashdParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignment([NotNull] MashdParser.AssignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Assignment</c>
	/// labeled alternative in <see cref="MashdParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignment([NotNull] MashdParser.AssignmentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AddAssignment</c>
	/// labeled alternative in <see cref="MashdParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddAssignment([NotNull] MashdParser.AddAssignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AddAssignment</c>
	/// labeled alternative in <see cref="MashdParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddAssignment([NotNull] MashdParser.AddAssignmentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SubtractAssignment</c>
	/// labeled alternative in <see cref="MashdParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSubtractAssignment([NotNull] MashdParser.SubtractAssignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SubtractAssignment</c>
	/// labeled alternative in <see cref="MashdParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSubtractAssignment([NotNull] MashdParser.SubtractAssignmentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MultiplyAssignment</c>
	/// labeled alternative in <see cref="MashdParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultiplyAssignment([NotNull] MashdParser.MultiplyAssignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MultiplyAssignment</c>
	/// labeled alternative in <see cref="MashdParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultiplyAssignment([NotNull] MashdParser.MultiplyAssignmentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DivisionAssignment</c>
	/// labeled alternative in <see cref="MashdParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDivisionAssignment([NotNull] MashdParser.DivisionAssignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DivisionAssignment</c>
	/// labeled alternative in <see cref="MashdParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDivisionAssignment([NotNull] MashdParser.DivisionAssignmentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NullCoalescingAssignment</c>
	/// labeled alternative in <see cref="MashdParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNullCoalescingAssignment([NotNull] MashdParser.NullCoalescingAssignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NullCoalescingAssignment</c>
	/// labeled alternative in <see cref="MashdParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNullCoalescingAssignment([NotNull] MashdParser.NullCoalescingAssignmentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ReturnStatement</c>
	/// labeled alternative in <see cref="MashdParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReturnStatement([NotNull] MashdParser.ReturnStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ReturnStatement</c>
	/// labeled alternative in <see cref="MashdParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReturnStatement([NotNull] MashdParser.ReturnStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>IfDefinition</c>
	/// labeled alternative in <see cref="MashdParser.if"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfDefinition([NotNull] MashdParser.IfDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IfDefinition</c>
	/// labeled alternative in <see cref="MashdParser.if"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfDefinition([NotNull] MashdParser.IfDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BlockDefinition</c>
	/// labeled alternative in <see cref="MashdParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlockDefinition([NotNull] MashdParser.BlockDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BlockDefinition</c>
	/// labeled alternative in <see cref="MashdParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlockDefinition([NotNull] MashdParser.BlockDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TernaryExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTernaryExpression([NotNull] MashdParser.TernaryExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TernaryExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTernaryExpression([NotNull] MashdParser.TernaryExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>LogicalAndExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicalAndExpression([NotNull] MashdParser.LogicalAndExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicalAndExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicalAndExpression([NotNull] MashdParser.LogicalAndExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PreIncrementExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPreIncrementExpression([NotNull] MashdParser.PreIncrementExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PreIncrementExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPreIncrementExpression([NotNull] MashdParser.PreIncrementExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>LogicalOrExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicalOrExpression([NotNull] MashdParser.LogicalOrExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicalOrExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicalOrExpression([NotNull] MashdParser.LogicalOrExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NotExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNotExpression([NotNull] MashdParser.NotExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NotExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNotExpression([NotNull] MashdParser.NotExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>GreaterThanExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGreaterThanExpression([NotNull] MashdParser.GreaterThanExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>GreaterThanExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGreaterThanExpression([NotNull] MashdParser.GreaterThanExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>FunctionCallExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionCallExpression([NotNull] MashdParser.FunctionCallExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>FunctionCallExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionCallExpression([NotNull] MashdParser.FunctionCallExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>InequalityExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInequalityExpression([NotNull] MashdParser.InequalityExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>InequalityExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInequalityExpression([NotNull] MashdParser.InequalityExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DatasetCombineExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDatasetCombineExpression([NotNull] MashdParser.DatasetCombineExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DatasetCombineExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDatasetCombineExpression([NotNull] MashdParser.DatasetCombineExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DivisionExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDivisionExpression([NotNull] MashdParser.DivisionExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DivisionExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDivisionExpression([NotNull] MashdParser.DivisionExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PostDecrementExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPostDecrementExpression([NotNull] MashdParser.PostDecrementExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PostDecrementExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPostDecrementExpression([NotNull] MashdParser.PostDecrementExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>EqualityExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEqualityExpression([NotNull] MashdParser.EqualityExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>EqualityExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEqualityExpression([NotNull] MashdParser.EqualityExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NegationExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNegationExpression([NotNull] MashdParser.NegationExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NegationExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNegationExpression([NotNull] MashdParser.NegationExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AdditionExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAdditionExpression([NotNull] MashdParser.AdditionExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AdditionExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAdditionExpression([NotNull] MashdParser.AdditionExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PostIncrementExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPostIncrementExpression([NotNull] MashdParser.PostIncrementExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PostIncrementExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPostIncrementExpression([NotNull] MashdParser.PostIncrementExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PreDecrementExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPreDecrementExpression([NotNull] MashdParser.PreDecrementExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PreDecrementExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPreDecrementExpression([NotNull] MashdParser.PreDecrementExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteralExpression([NotNull] MashdParser.LiteralExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteralExpression([NotNull] MashdParser.LiteralExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MethodChainExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMethodChainExpression([NotNull] MashdParser.MethodChainExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MethodChainExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMethodChainExpression([NotNull] MashdParser.MethodChainExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>IdentifierExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdentifierExpression([NotNull] MashdParser.IdentifierExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IdentifierExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdentifierExpression([NotNull] MashdParser.IdentifierExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SubtractionExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSubtractionExpression([NotNull] MashdParser.SubtractionExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SubtractionExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSubtractionExpression([NotNull] MashdParser.SubtractionExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>LessThanEqualExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLessThanEqualExpression([NotNull] MashdParser.LessThanEqualExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LessThanEqualExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLessThanEqualExpression([NotNull] MashdParser.LessThanEqualExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenExpression([NotNull] MashdParser.ParenExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenExpression([NotNull] MashdParser.ParenExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PropertyAccessExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPropertyAccessExpression([NotNull] MashdParser.PropertyAccessExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PropertyAccessExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPropertyAccessExpression([NotNull] MashdParser.PropertyAccessExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MultiplicationExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultiplicationExpression([NotNull] MashdParser.MultiplicationExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MultiplicationExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultiplicationExpression([NotNull] MashdParser.MultiplicationExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NullishCoalescingExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNullishCoalescingExpression([NotNull] MashdParser.NullishCoalescingExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NullishCoalescingExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNullishCoalescingExpression([NotNull] MashdParser.NullishCoalescingExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ObjectExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterObjectExpression([NotNull] MashdParser.ObjectExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ObjectExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitObjectExpression([NotNull] MashdParser.ObjectExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ModuloExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterModuloExpression([NotNull] MashdParser.ModuloExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ModuloExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitModuloExpression([NotNull] MashdParser.ModuloExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>LessThanExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLessThanExpression([NotNull] MashdParser.LessThanExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LessThanExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLessThanExpression([NotNull] MashdParser.LessThanExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>GreaterThanEqualExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGreaterThanEqualExpression([NotNull] MashdParser.GreaterThanEqualExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>GreaterThanEqualExpression</c>
	/// labeled alternative in <see cref="MashdParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGreaterThanEqualExpression([NotNull] MashdParser.GreaterThanEqualExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BooleanLiteral</c>
	/// labeled alternative in <see cref="MashdParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBooleanLiteral([NotNull] MashdParser.BooleanLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BooleanLiteral</c>
	/// labeled alternative in <see cref="MashdParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBooleanLiteral([NotNull] MashdParser.BooleanLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>IntegerLiteral</c>
	/// labeled alternative in <see cref="MashdParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIntegerLiteral([NotNull] MashdParser.IntegerLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IntegerLiteral</c>
	/// labeled alternative in <see cref="MashdParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIntegerLiteral([NotNull] MashdParser.IntegerLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DateLiteral</c>
	/// labeled alternative in <see cref="MashdParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDateLiteral([NotNull] MashdParser.DateLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DateLiteral</c>
	/// labeled alternative in <see cref="MashdParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDateLiteral([NotNull] MashdParser.DateLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DecimalLiteral</c>
	/// labeled alternative in <see cref="MashdParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDecimalLiteral([NotNull] MashdParser.DecimalLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DecimalLiteral</c>
	/// labeled alternative in <see cref="MashdParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDecimalLiteral([NotNull] MashdParser.DecimalLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TextLiteral</c>
	/// labeled alternative in <see cref="MashdParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTextLiteral([NotNull] MashdParser.TextLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TextLiteral</c>
	/// labeled alternative in <see cref="MashdParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTextLiteral([NotNull] MashdParser.TextLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SchemaLiteral</c>
	/// labeled alternative in <see cref="MashdParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSchemaLiteral([NotNull] MashdParser.SchemaLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SchemaLiteral</c>
	/// labeled alternative in <see cref="MashdParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSchemaLiteral([NotNull] MashdParser.SchemaLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DatasetLiteral</c>
	/// labeled alternative in <see cref="MashdParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDatasetLiteral([NotNull] MashdParser.DatasetLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DatasetLiteral</c>
	/// labeled alternative in <see cref="MashdParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDatasetLiteral([NotNull] MashdParser.DatasetLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MashdLiteral</c>
	/// labeled alternative in <see cref="MashdParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMashdLiteral([NotNull] MashdParser.MashdLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MashdLiteral</c>
	/// labeled alternative in <see cref="MashdParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMashdLiteral([NotNull] MashdParser.MashdLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NullLiteral</c>
	/// labeled alternative in <see cref="MashdParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNullLiteral([NotNull] MashdParser.NullLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NullLiteral</c>
	/// labeled alternative in <see cref="MashdParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNullLiteral([NotNull] MashdParser.NullLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MashdParser.keyValuePair"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterKeyValuePair([NotNull] MashdParser.KeyValuePairContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MashdParser.keyValuePair"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitKeyValuePair([NotNull] MashdParser.KeyValuePairContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MashdParser.actualParameters"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterActualParameters([NotNull] MashdParser.ActualParametersContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MashdParser.actualParameters"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitActualParameters([NotNull] MashdParser.ActualParametersContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MashdParser.methodChain"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMethodChain([NotNull] MashdParser.MethodChainContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MashdParser.methodChain"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMethodChain([NotNull] MashdParser.MethodChainContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MashdParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionCall([NotNull] MashdParser.FunctionCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MashdParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionCall([NotNull] MashdParser.FunctionCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MashdParser.schemaObject"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSchemaObject([NotNull] MashdParser.SchemaObjectContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MashdParser.schemaObject"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSchemaObject([NotNull] MashdParser.SchemaObjectContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MashdParser.schemaProperties"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSchemaProperties([NotNull] MashdParser.SchemaPropertiesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MashdParser.schemaProperties"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSchemaProperties([NotNull] MashdParser.SchemaPropertiesContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MashdParser.schemaProperty"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSchemaProperty([NotNull] MashdParser.SchemaPropertyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MashdParser.schemaProperty"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSchemaProperty([NotNull] MashdParser.SchemaPropertyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MashdParser.schemaFieldProperty"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSchemaFieldProperty([NotNull] MashdParser.SchemaFieldPropertyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MashdParser.schemaFieldProperty"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSchemaFieldProperty([NotNull] MashdParser.SchemaFieldPropertyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DatasetObjectExpression</c>
	/// labeled alternative in <see cref="MashdParser.datasetObject"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDatasetObjectExpression([NotNull] MashdParser.DatasetObjectExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DatasetObjectExpression</c>
	/// labeled alternative in <see cref="MashdParser.datasetObject"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDatasetObjectExpression([NotNull] MashdParser.DatasetObjectExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DatasetPropertyList</c>
	/// labeled alternative in <see cref="MashdParser.datasetProperties"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDatasetPropertyList([NotNull] MashdParser.DatasetPropertyListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DatasetPropertyList</c>
	/// labeled alternative in <see cref="MashdParser.datasetProperties"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDatasetPropertyList([NotNull] MashdParser.DatasetPropertyListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DatasetAdapter</c>
	/// labeled alternative in <see cref="MashdParser.datasetProperty"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDatasetAdapter([NotNull] MashdParser.DatasetAdapterContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DatasetAdapter</c>
	/// labeled alternative in <see cref="MashdParser.datasetProperty"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDatasetAdapter([NotNull] MashdParser.DatasetAdapterContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DatasetSource</c>
	/// labeled alternative in <see cref="MashdParser.datasetProperty"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDatasetSource([NotNull] MashdParser.DatasetSourceContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DatasetSource</c>
	/// labeled alternative in <see cref="MashdParser.datasetProperty"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDatasetSource([NotNull] MashdParser.DatasetSourceContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DatasetSchema</c>
	/// labeled alternative in <see cref="MashdParser.datasetProperty"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDatasetSchema([NotNull] MashdParser.DatasetSchemaContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DatasetSchema</c>
	/// labeled alternative in <see cref="MashdParser.datasetProperty"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDatasetSchema([NotNull] MashdParser.DatasetSchemaContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>CsvDelimiter</c>
	/// labeled alternative in <see cref="MashdParser.datasetProperty"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCsvDelimiter([NotNull] MashdParser.CsvDelimiterContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>CsvDelimiter</c>
	/// labeled alternative in <see cref="MashdParser.datasetProperty"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCsvDelimiter([NotNull] MashdParser.CsvDelimiterContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DatabaseQuery</c>
	/// labeled alternative in <see cref="MashdParser.datasetProperty"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDatabaseQuery([NotNull] MashdParser.DatabaseQueryContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DatabaseQuery</c>
	/// labeled alternative in <see cref="MashdParser.datasetProperty"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDatabaseQuery([NotNull] MashdParser.DatabaseQueryContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DatasetSkip</c>
	/// labeled alternative in <see cref="MashdParser.datasetProperty"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDatasetSkip([NotNull] MashdParser.DatasetSkipContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DatasetSkip</c>
	/// labeled alternative in <see cref="MashdParser.datasetProperty"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDatasetSkip([NotNull] MashdParser.DatasetSkipContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MashdParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterType([NotNull] MashdParser.TypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MashdParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitType([NotNull] MashdParser.TypeContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
