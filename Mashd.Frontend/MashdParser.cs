//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Mashd.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MashdParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		INTEGER=46, DECIMAL=47, TEXT=48, ID=49, BOOLEAN=50, NULL=51, DATE=52, 
		SCHEMA=53, DATASET=54, MASHD=55, SCHEMA_CONTENT=56, SCHEMA_PROPERTY=57, 
		SCHEMA_COLUMN_PROPERTY=58, COLUMN_DATA_TYPE=59, DATASET_CONTENT=60, DATASET_PROPERTY=61, 
		SHARED_DATASET_PROPERTY=62, CSV_SHARED_DATASET_PROPERTY=63, DATABASE_DATASET_PROPERTY=64, 
		MATCHD_CONTENT=65, MATCHD_STRATEGY=66, EXACT_MATCH=67, FUZZY_MATCH=68, 
		WS=69, COMMENT=70, MULTILINE_COMMENT=71;
	public const int
		RULE_program = 0, RULE_importStatement = 1, RULE_definition = 2, RULE_formalParameters = 3, 
		RULE_statement = 4, RULE_block = 5, RULE_statements = 6, RULE_expression = 7, 
		RULE_literal = 8, RULE_keyValuePair = 9, RULE_actualParameters = 10, RULE_methodChain = 11, 
		RULE_functionCall = 12, RULE_type = 13;
	public static readonly string[] ruleNames = {
		"program", "importStatement", "definition", "formalParameters", "statement", 
		"block", "statements", "expression", "literal", "keyValuePair", "actualParameters", 
		"methodChain", "functionCall", "type"
	};

	private static readonly string[] _LiteralNames = {
		null, "'import'", "';'", "'('", "')'", "'='", "','", "'+='", "'-='", "'*='", 
		"'/='", "'??='", "'if'", "'else'", "'?'", "':'", "'return'", "'{'", "'}'", 
		"'&'", "'.'", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'+'", "'-'", 
		"'*'", "'/'", "'%'", "'||'", "'&&'", "'??'", "'!'", "'++'", "'--'", "'Boolean'", 
		"'Integer'", "'Date'", "'Decimal'", "'Text'", "'Schema'", "'Dataset'", 
		"'Mashd'", null, null, null, null, null, "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "INTEGER", 
		"DECIMAL", "TEXT", "ID", "BOOLEAN", "NULL", "DATE", "SCHEMA", "DATASET", 
		"MASHD", "SCHEMA_CONTENT", "SCHEMA_PROPERTY", "SCHEMA_COLUMN_PROPERTY", 
		"COLUMN_DATA_TYPE", "DATASET_CONTENT", "DATASET_PROPERTY", "SHARED_DATASET_PROPERTY", 
		"CSV_SHARED_DATASET_PROPERTY", "DATABASE_DATASET_PROPERTY", "MATCHD_CONTENT", 
		"MATCHD_STRATEGY", "EXACT_MATCH", "FUZZY_MATCH", "WS", "COMMENT", "MULTILINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Mashd.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MashdParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MashdParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MashdParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MashdParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext[] importStatement() {
			return GetRuleContexts<ImportStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext importStatement(int i) {
			return GetRuleContext<ImportStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext[] definition() {
			return GetRuleContexts<DefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition(int i) {
			return GetRuleContext<DefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 72057559946825738L) != 0)) {
				{
				State = 31;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 28;
					importStatement();
					}
					break;
				case 2:
					{
					State = 29;
					definition();
					}
					break;
				case 3:
					{
					State = 30;
					statement();
					}
					break;
				}
				}
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 36;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
	 
		public ImportStatementContext() { }
		public virtual void CopyFrom(ImportStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ImportDeclarationContext : ImportStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(MashdParser.TEXT, 0); }
		public ImportDeclarationContext(ImportStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterImportDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitImportDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_importStatement);
		try {
			_localctx = new ImportDeclarationContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			Match(T__0);
			State = 39;
			Match(TEXT);
			State = 40;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
	 
		public DefinitionContext() { }
		public virtual void CopyFrom(DefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableDefinitionContext : DefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDefinitionContext(DefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterVariableDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitVariableDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionDefinitionContext : DefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionDefinitionContext(DefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterFunctionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitFunctionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_definition);
		try {
			State = 55;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new FunctionDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 42;
				type();
				State = 43;
				Match(ID);
				State = 44;
				Match(T__2);
				State = 45;
				formalParameters();
				State = 46;
				Match(T__3);
				State = 47;
				block();
				}
				break;
			case 2:
				_localctx = new VariableDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 49;
				type();
				State = 50;
				Match(ID);
				State = 51;
				Match(T__4);
				State = 52;
				expression(0);
				State = 53;
				Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParametersContext : ParserRuleContext {
		public FormalParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameters; } }
	 
		public FormalParametersContext() { }
		public virtual void CopyFrom(FormalParametersContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParameterListContext : FormalParametersContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(MashdParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(MashdParser.ID, i);
		}
		public ParameterListContext(FormalParametersContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParametersContext formalParameters() {
		FormalParametersContext _localctx = new FormalParametersContext(Context, State);
		EnterRule(_localctx, 6, RULE_formalParameters);
		int _la;
		try {
			_localctx = new ParameterListContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 70093866270720L) != 0)) {
				{
				State = 57;
				type();
				State = 58;
				Match(ID);
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__5) {
					{
					{
					State = 59;
					Match(T__5);
					State = 60;
					type();
					State = 61;
					Match(ID);
					}
					}
					State = 67;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssignmentContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullCoalescingAssignmentContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NullCoalescingAssignmentContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterNullCoalescingAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitNullCoalescingAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullCoalescingAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public TernaryStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterTernaryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitTernaryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddAssignmentContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AddAssignmentContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterAddAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitAddAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivisionAssignmentContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DivisionAssignmentContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterDivisionAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitDivisionAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivisionAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfElseStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfElseStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterIfElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitIfElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclarationContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplyAssignmentContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MultiplyAssignmentContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterMultiplyAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitMultiplyAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubtractAssignmentContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SubtractAssignmentContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterSubtractAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitSubtractAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtractAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_statement);
		int _la;
		try {
			State = 129;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				_localctx = new BlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 70;
				block();
				}
				break;
			case 2:
				_localctx = new VariableDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 71;
				type();
				State = 72;
				Match(ID);
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__4) {
					{
					State = 73;
					Match(T__4);
					State = 74;
					expression(0);
					}
				}

				State = 77;
				Match(T__1);
				}
				break;
			case 3:
				_localctx = new AssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 79;
				Match(ID);
				State = 80;
				Match(T__4);
				State = 81;
				expression(0);
				State = 82;
				Match(T__1);
				}
				break;
			case 4:
				_localctx = new AddAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 84;
				Match(ID);
				State = 85;
				Match(T__6);
				State = 86;
				expression(0);
				State = 87;
				Match(T__1);
				}
				break;
			case 5:
				_localctx = new SubtractAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 89;
				Match(ID);
				State = 90;
				Match(T__7);
				State = 91;
				expression(0);
				State = 92;
				Match(T__1);
				}
				break;
			case 6:
				_localctx = new MultiplyAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 94;
				Match(ID);
				State = 95;
				Match(T__8);
				State = 96;
				expression(0);
				State = 97;
				Match(T__1);
				}
				break;
			case 7:
				_localctx = new DivisionAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 99;
				Match(ID);
				State = 100;
				Match(T__9);
				State = 101;
				expression(0);
				State = 102;
				Match(T__1);
				}
				break;
			case 8:
				_localctx = new NullCoalescingAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 104;
				Match(ID);
				State = 105;
				Match(T__10);
				State = 106;
				expression(0);
				State = 107;
				Match(T__1);
				}
				break;
			case 9:
				_localctx = new IfElseStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 109;
				Match(T__11);
				State = 110;
				Match(T__2);
				State = 111;
				expression(0);
				State = 112;
				Match(T__3);
				State = 113;
				statement();
				State = 116;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 114;
					Match(T__12);
					State = 115;
					statement();
					}
					break;
				}
				}
				break;
			case 10:
				_localctx = new TernaryStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 118;
				expression(0);
				State = 119;
				Match(T__13);
				State = 120;
				statement();
				State = 121;
				Match(T__14);
				State = 122;
				statement();
				State = 123;
				Match(T__1);
				}
				break;
			case 11:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 125;
				Match(T__15);
				State = 126;
				expression(0);
				State = 127;
				Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	 
		public BlockContext() { }
		public virtual void CopyFrom(BlockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockDefinitionContext : BlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public BlockDefinitionContext(BlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterBlockDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitBlockDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_block);
		try {
			_localctx = new BlockDefinitionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			Match(T__16);
			State = 132;
			statements();
			State = 133;
			Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
	 
		public StatementsContext() { }
		public virtual void CopyFrom(StatementsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SequentialStatementsContext : StatementsContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SequentialStatementsContext(StatementsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterSequentialStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitSequentialStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSequentialStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 12, RULE_statements);
		int _la;
		try {
			_localctx = new SequentialStatementsContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 72057559946825736L) != 0)) {
				{
				{
				State = 135;
				statement();
				}
				}
				State = 140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LogicalAndExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicalAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreIncrementExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PreIncrementExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterPreIncrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitPreIncrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicalOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterThanExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public GreaterThanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterGreaterThanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitGreaterThanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterThanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InequalityExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public InequalityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterInequalityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitInequalityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInequalityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DatasetCombineExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DATASET() { return GetTokens(MashdParser.DATASET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATASET(int i) {
			return GetToken(MashdParser.DATASET, i);
		}
		public DatasetCombineExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterDatasetCombineExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitDatasetCombineExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasetCombineExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivisionExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DivisionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterDivisionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitDivisionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivisionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostDecrementExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PostDecrementExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterPostDecrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitPostDecrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostDecrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegationExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NegationExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterNegationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitNegationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AdditionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterAdditionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitAdditionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostIncrementExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PostIncrementExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterPostIncrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitPostIncrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreDecrementExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PreDecrementExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterPreDecrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitPreDecrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreDecrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodChainExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodChainContext methodChain() {
			return GetRuleContext<MethodChainContext>(0);
		}
		public MethodChainExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterMethodChainExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitMethodChainExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodChainExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubtractionExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SubtractionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterSubtractionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitSubtractionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtractionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LessThanEqualExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LessThanEqualExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterLessThanEqualExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitLessThanEqualExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessThanEqualExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterParenExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitParenExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropertyAccessExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		public PropertyAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterPropertyAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitPropertyAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplicationExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterMultiplicationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitMultiplicationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullishCoalescingExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NullishCoalescingExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterNullishCoalescingExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitNullishCoalescingExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullishCoalescingExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyValuePairContext[] keyValuePair() {
			return GetRuleContexts<KeyValuePairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyValuePairContext keyValuePair(int i) {
			return GetRuleContext<KeyValuePairContext>(i);
		}
		public ObjectExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterObjectExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitObjectExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModuloExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ModuloExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterModuloExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitModuloExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuloExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LessThanExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LessThanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterLessThanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitLessThanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessThanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterThanEqualExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public GreaterThanEqualExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterGreaterThanEqualExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitGreaterThanEqualExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterThanEqualExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 142;
				Match(ID);
				}
				break;
			case 2:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 143;
				literal();
				}
				break;
			case 3:
				{
				_localctx = new DatasetCombineExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 144;
				Match(DATASET);
				State = 145;
				Match(T__18);
				State = 146;
				Match(DATASET);
				}
				break;
			case 4:
				{
				_localctx = new ParenExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 147;
				Match(T__2);
				State = 148;
				expression(0);
				State = 149;
				Match(T__3);
				}
				break;
			case 5:
				{
				_localctx = new FunctionCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 151;
				functionCall();
				}
				break;
			case 6:
				{
				_localctx = new ObjectExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 152;
				Match(T__16);
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ID) {
					{
					State = 153;
					keyValuePair();
					State = 158;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__5) {
						{
						{
						State = 154;
						Match(T__5);
						State = 155;
						keyValuePair();
						}
						}
						State = 160;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 163;
				Match(T__17);
				}
				break;
			case 7:
				{
				_localctx = new NegationExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 164;
				Match(T__27);
				State = 165;
				expression(6);
				}
				break;
			case 8:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 166;
				Match(T__34);
				State = 167;
				expression(5);
				}
				break;
			case 9:
				{
				_localctx = new PreIncrementExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 168;
				Match(T__35);
				State = 169;
				expression(2);
				}
				break;
			case 10:
				{
				_localctx = new PreDecrementExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 170;
				Match(T__36);
				State = 171;
				expression(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 228;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 226;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
					case 1:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 174;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 175;
						Match(T__20);
						State = 176;
						expression(21);
						}
						break;
					case 2:
						{
						_localctx = new InequalityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 177;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 178;
						Match(T__21);
						State = 179;
						expression(20);
						}
						break;
					case 3:
						{
						_localctx = new LessThanExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 180;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 181;
						Match(T__22);
						State = 182;
						expression(19);
						}
						break;
					case 4:
						{
						_localctx = new LessThanEqualExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 183;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 184;
						Match(T__23);
						State = 185;
						expression(18);
						}
						break;
					case 5:
						{
						_localctx = new GreaterThanExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 186;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 187;
						Match(T__24);
						State = 188;
						expression(17);
						}
						break;
					case 6:
						{
						_localctx = new GreaterThanEqualExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 189;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 190;
						Match(T__25);
						State = 191;
						expression(16);
						}
						break;
					case 7:
						{
						_localctx = new AdditionExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 192;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 193;
						Match(T__26);
						State = 194;
						expression(15);
						}
						break;
					case 8:
						{
						_localctx = new SubtractionExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 195;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 196;
						Match(T__27);
						State = 197;
						expression(14);
						}
						break;
					case 9:
						{
						_localctx = new MultiplicationExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 198;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 199;
						Match(T__28);
						State = 200;
						expression(13);
						}
						break;
					case 10:
						{
						_localctx = new DivisionExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 201;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 202;
						Match(T__29);
						State = 203;
						expression(12);
						}
						break;
					case 11:
						{
						_localctx = new ModuloExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 204;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 205;
						Match(T__30);
						State = 206;
						expression(11);
						}
						break;
					case 12:
						{
						_localctx = new LogicalOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 207;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 208;
						Match(T__31);
						State = 209;
						expression(10);
						}
						break;
					case 13:
						{
						_localctx = new LogicalAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 210;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 211;
						Match(T__32);
						State = 212;
						expression(9);
						}
						break;
					case 14:
						{
						_localctx = new NullishCoalescingExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 213;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 214;
						Match(T__33);
						State = 215;
						expression(8);
						}
						break;
					case 15:
						{
						_localctx = new PropertyAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 216;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 217;
						Match(T__19);
						State = 218;
						Match(ID);
						}
						break;
					case 16:
						{
						_localctx = new MethodChainExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 219;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 220;
						Match(T__19);
						State = 221;
						methodChain();
						}
						break;
					case 17:
						{
						_localctx = new PostIncrementExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 222;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 223;
						Match(T__35);
						}
						break;
					case 18:
						{
						_localctx = new PostDecrementExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 224;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 225;
						Match(T__36);
						}
						break;
					}
					} 
				}
				State = 230;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SchemaLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(MashdParser.SCHEMA, 0); }
		public SchemaLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterSchemaLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitSchemaLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchemaLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DatasetLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATASET() { return GetToken(MashdParser.DATASET, 0); }
		public DatasetLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterDatasetLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitDatasetLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasetLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DateLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(MashdParser.DATE, 0); }
		public DateLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterDateLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitDateLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(MashdParser.BOOLEAN, 0); }
		public BooleanLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecimalLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(MashdParser.DECIMAL, 0); }
		public DecimalLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterDecimalLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitDecimalLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TextLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(MashdParser.TEXT, 0); }
		public TextLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterTextLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitTextLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MashdLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASHD() { return GetToken(MashdParser.MASHD, 0); }
		public MashdLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterMashdLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitMashdLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMashdLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(MashdParser.NULL, 0); }
		public NullLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntegerLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(MashdParser.INTEGER, 0); }
		public IntegerLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 16, RULE_literal);
		try {
			State = 240;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
				_localctx = new BooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 231;
				Match(BOOLEAN);
				}
				break;
			case INTEGER:
				_localctx = new IntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 232;
				Match(INTEGER);
				}
				break;
			case DATE:
				_localctx = new DateLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 233;
				Match(DATE);
				}
				break;
			case DECIMAL:
				_localctx = new DecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 234;
				Match(DECIMAL);
				}
				break;
			case TEXT:
				_localctx = new TextLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 235;
				Match(TEXT);
				}
				break;
			case SCHEMA:
				_localctx = new SchemaLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 236;
				Match(SCHEMA);
				}
				break;
			case DATASET:
				_localctx = new DatasetLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 237;
				Match(DATASET);
				}
				break;
			case MASHD:
				_localctx = new MashdLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 238;
				Match(MASHD);
				}
				break;
			case NULL:
				_localctx = new NullLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 239;
				Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyValuePairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public KeyValuePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyValuePair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterKeyValuePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitKeyValuePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyValuePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyValuePairContext keyValuePair() {
		KeyValuePairContext _localctx = new KeyValuePairContext(Context, State);
		EnterRule(_localctx, 18, RULE_keyValuePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			Match(ID);
			State = 243;
			Match(T__14);
			State = 244;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ActualParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actualParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterActualParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitActualParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActualParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActualParametersContext actualParameters() {
		ActualParametersContext _localctx = new ActualParametersContext(Context, State);
		EnterRule(_localctx, 20, RULE_actualParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			expression(0);
			State = 251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 247;
				Match(T__5);
				State = 248;
				expression(0);
				}
				}
				State = 253;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodChainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodChainContext methodChain() {
			return GetRuleContext<MethodChainContext>(0);
		}
		public MethodChainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodChain; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterMethodChain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitMethodChain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodChain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodChainContext methodChain() {
		MethodChainContext _localctx = new MethodChainContext(Context, State);
		EnterRule(_localctx, 22, RULE_methodChain);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			functionCall();
			State = 257;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 255;
				Match(T__19);
				State = 256;
				methodChain();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActualParametersContext actualParameters() {
			return GetRuleContext<ActualParametersContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 24, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			Match(ID);
			State = 260;
			Match(T__2);
			State = 262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 71987466080485384L) != 0)) {
				{
				State = 261;
				actualParameters();
				}
			}

			State = 264;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 26, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 70093866270720L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 20);
		case 1: return Precpred(Context, 19);
		case 2: return Precpred(Context, 18);
		case 3: return Precpred(Context, 17);
		case 4: return Precpred(Context, 16);
		case 5: return Precpred(Context, 15);
		case 6: return Precpred(Context, 14);
		case 7: return Precpred(Context, 13);
		case 8: return Precpred(Context, 12);
		case 9: return Precpred(Context, 11);
		case 10: return Precpred(Context, 10);
		case 11: return Precpred(Context, 9);
		case 12: return Precpred(Context, 8);
		case 13: return Precpred(Context, 7);
		case 14: return Precpred(Context, 24);
		case 15: return Precpred(Context, 23);
		case 16: return Precpred(Context, 4);
		case 17: return Precpred(Context, 3);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,71,269,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,1,0,1,0,1,
		0,5,0,32,8,0,10,0,12,0,35,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,56,8,2,1,3,1,3,1,3,1,3,1,3,1,3,
		5,3,64,8,3,10,3,12,3,67,9,3,3,3,69,8,3,1,4,1,4,1,4,1,4,1,4,3,4,76,8,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,3,4,117,8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,3,4,130,8,4,1,5,1,5,1,5,1,5,1,6,5,6,137,8,6,10,6,12,6,140,9,6,1,7,1,
		7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,157,8,7,10,7,
		12,7,160,9,7,3,7,162,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,173,8,
		7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
		1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
		5,7,227,8,7,10,7,12,7,230,9,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,
		241,8,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,5,10,250,8,10,10,10,12,10,253,9,
		10,1,11,1,11,1,11,3,11,258,8,11,1,12,1,12,1,12,3,12,263,8,12,1,12,1,12,
		1,13,1,13,1,13,0,1,14,14,0,2,4,6,8,10,12,14,16,18,20,22,24,26,0,1,1,0,
		38,45,313,0,33,1,0,0,0,2,38,1,0,0,0,4,55,1,0,0,0,6,68,1,0,0,0,8,129,1,
		0,0,0,10,131,1,0,0,0,12,138,1,0,0,0,14,172,1,0,0,0,16,240,1,0,0,0,18,242,
		1,0,0,0,20,246,1,0,0,0,22,254,1,0,0,0,24,259,1,0,0,0,26,266,1,0,0,0,28,
		32,3,2,1,0,29,32,3,4,2,0,30,32,3,8,4,0,31,28,1,0,0,0,31,29,1,0,0,0,31,
		30,1,0,0,0,32,35,1,0,0,0,33,31,1,0,0,0,33,34,1,0,0,0,34,36,1,0,0,0,35,
		33,1,0,0,0,36,37,5,0,0,1,37,1,1,0,0,0,38,39,5,1,0,0,39,40,5,48,0,0,40,
		41,5,2,0,0,41,3,1,0,0,0,42,43,3,26,13,0,43,44,5,49,0,0,44,45,5,3,0,0,45,
		46,3,6,3,0,46,47,5,4,0,0,47,48,3,10,5,0,48,56,1,0,0,0,49,50,3,26,13,0,
		50,51,5,49,0,0,51,52,5,5,0,0,52,53,3,14,7,0,53,54,5,2,0,0,54,56,1,0,0,
		0,55,42,1,0,0,0,55,49,1,0,0,0,56,5,1,0,0,0,57,58,3,26,13,0,58,65,5,49,
		0,0,59,60,5,6,0,0,60,61,3,26,13,0,61,62,5,49,0,0,62,64,1,0,0,0,63,59,1,
		0,0,0,64,67,1,0,0,0,65,63,1,0,0,0,65,66,1,0,0,0,66,69,1,0,0,0,67,65,1,
		0,0,0,68,57,1,0,0,0,68,69,1,0,0,0,69,7,1,0,0,0,70,130,3,10,5,0,71,72,3,
		26,13,0,72,75,5,49,0,0,73,74,5,5,0,0,74,76,3,14,7,0,75,73,1,0,0,0,75,76,
		1,0,0,0,76,77,1,0,0,0,77,78,5,2,0,0,78,130,1,0,0,0,79,80,5,49,0,0,80,81,
		5,5,0,0,81,82,3,14,7,0,82,83,5,2,0,0,83,130,1,0,0,0,84,85,5,49,0,0,85,
		86,5,7,0,0,86,87,3,14,7,0,87,88,5,2,0,0,88,130,1,0,0,0,89,90,5,49,0,0,
		90,91,5,8,0,0,91,92,3,14,7,0,92,93,5,2,0,0,93,130,1,0,0,0,94,95,5,49,0,
		0,95,96,5,9,0,0,96,97,3,14,7,0,97,98,5,2,0,0,98,130,1,0,0,0,99,100,5,49,
		0,0,100,101,5,10,0,0,101,102,3,14,7,0,102,103,5,2,0,0,103,130,1,0,0,0,
		104,105,5,49,0,0,105,106,5,11,0,0,106,107,3,14,7,0,107,108,5,2,0,0,108,
		130,1,0,0,0,109,110,5,12,0,0,110,111,5,3,0,0,111,112,3,14,7,0,112,113,
		5,4,0,0,113,116,3,8,4,0,114,115,5,13,0,0,115,117,3,8,4,0,116,114,1,0,0,
		0,116,117,1,0,0,0,117,130,1,0,0,0,118,119,3,14,7,0,119,120,5,14,0,0,120,
		121,3,8,4,0,121,122,5,15,0,0,122,123,3,8,4,0,123,124,5,2,0,0,124,130,1,
		0,0,0,125,126,5,16,0,0,126,127,3,14,7,0,127,128,5,2,0,0,128,130,1,0,0,
		0,129,70,1,0,0,0,129,71,1,0,0,0,129,79,1,0,0,0,129,84,1,0,0,0,129,89,1,
		0,0,0,129,94,1,0,0,0,129,99,1,0,0,0,129,104,1,0,0,0,129,109,1,0,0,0,129,
		118,1,0,0,0,129,125,1,0,0,0,130,9,1,0,0,0,131,132,5,17,0,0,132,133,3,12,
		6,0,133,134,5,18,0,0,134,11,1,0,0,0,135,137,3,8,4,0,136,135,1,0,0,0,137,
		140,1,0,0,0,138,136,1,0,0,0,138,139,1,0,0,0,139,13,1,0,0,0,140,138,1,0,
		0,0,141,142,6,7,-1,0,142,173,5,49,0,0,143,173,3,16,8,0,144,145,5,54,0,
		0,145,146,5,19,0,0,146,173,5,54,0,0,147,148,5,3,0,0,148,149,3,14,7,0,149,
		150,5,4,0,0,150,173,1,0,0,0,151,173,3,24,12,0,152,161,5,17,0,0,153,158,
		3,18,9,0,154,155,5,6,0,0,155,157,3,18,9,0,156,154,1,0,0,0,157,160,1,0,
		0,0,158,156,1,0,0,0,158,159,1,0,0,0,159,162,1,0,0,0,160,158,1,0,0,0,161,
		153,1,0,0,0,161,162,1,0,0,0,162,163,1,0,0,0,163,173,5,18,0,0,164,165,5,
		28,0,0,165,173,3,14,7,6,166,167,5,35,0,0,167,173,3,14,7,5,168,169,5,36,
		0,0,169,173,3,14,7,2,170,171,5,37,0,0,171,173,3,14,7,1,172,141,1,0,0,0,
		172,143,1,0,0,0,172,144,1,0,0,0,172,147,1,0,0,0,172,151,1,0,0,0,172,152,
		1,0,0,0,172,164,1,0,0,0,172,166,1,0,0,0,172,168,1,0,0,0,172,170,1,0,0,
		0,173,228,1,0,0,0,174,175,10,20,0,0,175,176,5,21,0,0,176,227,3,14,7,21,
		177,178,10,19,0,0,178,179,5,22,0,0,179,227,3,14,7,20,180,181,10,18,0,0,
		181,182,5,23,0,0,182,227,3,14,7,19,183,184,10,17,0,0,184,185,5,24,0,0,
		185,227,3,14,7,18,186,187,10,16,0,0,187,188,5,25,0,0,188,227,3,14,7,17,
		189,190,10,15,0,0,190,191,5,26,0,0,191,227,3,14,7,16,192,193,10,14,0,0,
		193,194,5,27,0,0,194,227,3,14,7,15,195,196,10,13,0,0,196,197,5,28,0,0,
		197,227,3,14,7,14,198,199,10,12,0,0,199,200,5,29,0,0,200,227,3,14,7,13,
		201,202,10,11,0,0,202,203,5,30,0,0,203,227,3,14,7,12,204,205,10,10,0,0,
		205,206,5,31,0,0,206,227,3,14,7,11,207,208,10,9,0,0,208,209,5,32,0,0,209,
		227,3,14,7,10,210,211,10,8,0,0,211,212,5,33,0,0,212,227,3,14,7,9,213,214,
		10,7,0,0,214,215,5,34,0,0,215,227,3,14,7,8,216,217,10,24,0,0,217,218,5,
		20,0,0,218,227,5,49,0,0,219,220,10,23,0,0,220,221,5,20,0,0,221,227,3,22,
		11,0,222,223,10,4,0,0,223,227,5,36,0,0,224,225,10,3,0,0,225,227,5,37,0,
		0,226,174,1,0,0,0,226,177,1,0,0,0,226,180,1,0,0,0,226,183,1,0,0,0,226,
		186,1,0,0,0,226,189,1,0,0,0,226,192,1,0,0,0,226,195,1,0,0,0,226,198,1,
		0,0,0,226,201,1,0,0,0,226,204,1,0,0,0,226,207,1,0,0,0,226,210,1,0,0,0,
		226,213,1,0,0,0,226,216,1,0,0,0,226,219,1,0,0,0,226,222,1,0,0,0,226,224,
		1,0,0,0,227,230,1,0,0,0,228,226,1,0,0,0,228,229,1,0,0,0,229,15,1,0,0,0,
		230,228,1,0,0,0,231,241,5,50,0,0,232,241,5,46,0,0,233,241,5,52,0,0,234,
		241,5,47,0,0,235,241,5,48,0,0,236,241,5,53,0,0,237,241,5,54,0,0,238,241,
		5,55,0,0,239,241,5,51,0,0,240,231,1,0,0,0,240,232,1,0,0,0,240,233,1,0,
		0,0,240,234,1,0,0,0,240,235,1,0,0,0,240,236,1,0,0,0,240,237,1,0,0,0,240,
		238,1,0,0,0,240,239,1,0,0,0,241,17,1,0,0,0,242,243,5,49,0,0,243,244,5,
		15,0,0,244,245,3,14,7,0,245,19,1,0,0,0,246,251,3,14,7,0,247,248,5,6,0,
		0,248,250,3,14,7,0,249,247,1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,251,
		252,1,0,0,0,252,21,1,0,0,0,253,251,1,0,0,0,254,257,3,24,12,0,255,256,5,
		20,0,0,256,258,3,22,11,0,257,255,1,0,0,0,257,258,1,0,0,0,258,23,1,0,0,
		0,259,260,5,49,0,0,260,262,5,3,0,0,261,263,3,20,10,0,262,261,1,0,0,0,262,
		263,1,0,0,0,263,264,1,0,0,0,264,265,5,4,0,0,265,25,1,0,0,0,266,267,7,0,
		0,0,267,27,1,0,0,0,18,31,33,55,65,68,75,116,129,138,158,161,172,226,228,
		240,251,257,262
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
