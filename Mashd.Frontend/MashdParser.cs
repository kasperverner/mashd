//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Mashd.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MashdParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, ID=45, INTEGER=46, 
		DECIMAL=47, STRING=48, DATE=49, SCHEMA=50, DATASET=51, MASHD=52, Boolean=53, 
		Integer=54, Date=55, Decimal=56, Text=57, Schema=58, Dataset=59, Mashd=60, 
		WS=61, COMMENT=62;
	public const int
		RULE_program = 0, RULE_definition = 1, RULE_statement = 2, RULE_expression = 3, 
		RULE_logicalExpression = 4, RULE_equalityExpression = 5, RULE_relationExpression = 6, 
		RULE_binaryExpression = 7, RULE_multiplyExpression = 8, RULE_unaryExpression = 9, 
		RULE_postfixExpression = 10, RULE_primaryExpression = 11, RULE_keyValuePair = 12, 
		RULE_parameters = 13, RULE_expressionList = 14, RULE_type = 15, RULE_identifier = 16;
	public static readonly string[] ruleNames = {
		"program", "definition", "statement", "expression", "logicalExpression", 
		"equalityExpression", "relationExpression", "binaryExpression", "multiplyExpression", 
		"unaryExpression", "postfixExpression", "primaryExpression", "keyValuePair", 
		"parameters", "expressionList", "type", "identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "'import'", "'('", "')'", "'='", "'{'", "';'", "'}'", "'+='", "'-='", 
		"'*='", "'/='", "'??='", "'if'", "'else'", "'?'", "':'", "'return'", "'||'", 
		"'&&'", "'??'", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'+'", "'-'", 
		"'*'", "'/'", "'%'", "'!'", "'++'", "'--'", "'null'", "','", "'Boolean'", 
		"'Integer'", "'Date'", "'Decimal'", "'Text'", "'Schema'", "'Dataset'", 
		"'Mashd'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "ID", "INTEGER", 
		"DECIMAL", "STRING", "DATE", "SCHEMA", "DATASET", "MASHD", "Boolean", 
		"Integer", "Date", "Decimal", "Text", "Schema", "Dataset", "Mashd", "WS", 
		"COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Mashd.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MashdParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MashdParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MashdParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(MashdParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProgramContext program() {
			return GetRuleContext<ProgramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MashdParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			State = 44;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 34;
				Match(T__0);
				State = 35;
				Match(STRING);
				State = 36;
				program();
				}
				break;
			case T__36:
			case T__37:
			case T__38:
			case T__39:
			case T__40:
			case T__41:
			case T__42:
			case T__43:
				EnterOuterAlt(_localctx, 2);
				{
				State = 37;
				definition();
				State = 38;
				program();
				}
				break;
			case T__1:
			case T__4:
			case T__12:
			case T__16:
			case T__27:
			case T__31:
			case T__34:
			case ID:
			case Boolean:
			case Integer:
			case Date:
			case Decimal:
			case Text:
			case Schema:
			case Dataset:
			case Mashd:
				EnterOuterAlt(_localctx, 3);
				{
				State = 40;
				statement(0);
				State = 41;
				program();
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 4);
				{
				State = 43;
				Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 2, RULE_definition);
		try {
			State = 57;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 46;
				type();
				State = 47;
				identifier();
				State = 48;
				Match(T__1);
				State = 49;
				parameters();
				State = 50;
				Match(T__2);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 52;
				type();
				State = 53;
				identifier();
				State = 54;
				Match(T__3);
				State = 55;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		return statement(0);
	}

	private StatementContext statement(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		StatementContext _localctx = new StatementContext(Context, _parentState);
		StatementContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_statement, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 60;
				Match(T__4);
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 35046933135360L) != 0)) {
					{
					{
					State = 61;
					type();
					State = 62;
					identifier();
					State = 63;
					Match(T__5);
					}
					}
					State = 69;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 70;
				statement(0);
				State = 71;
				Match(T__6);
				}
				break;
			case 2:
				{
				State = 73;
				identifier();
				State = 74;
				Match(T__3);
				State = 75;
				expression();
				}
				break;
			case 3:
				{
				State = 77;
				identifier();
				State = 78;
				Match(T__7);
				State = 79;
				expression();
				}
				break;
			case 4:
				{
				State = 81;
				identifier();
				State = 82;
				Match(T__8);
				State = 83;
				expression();
				}
				break;
			case 5:
				{
				State = 85;
				identifier();
				State = 86;
				Match(T__9);
				State = 87;
				expression();
				}
				break;
			case 6:
				{
				State = 89;
				identifier();
				State = 90;
				Match(T__10);
				State = 91;
				expression();
				}
				break;
			case 7:
				{
				State = 93;
				identifier();
				State = 94;
				Match(T__11);
				State = 95;
				expression();
				}
				break;
			case 8:
				{
				State = 97;
				Match(T__12);
				State = 98;
				Match(T__1);
				State = 99;
				expression();
				State = 100;
				Match(T__2);
				State = 101;
				statement(4);
				}
				break;
			case 9:
				{
				State = 103;
				Match(T__12);
				State = 104;
				Match(T__1);
				State = 105;
				expression();
				State = 106;
				Match(T__2);
				State = 107;
				statement(0);
				State = 108;
				Match(T__13);
				State = 109;
				statement(3);
				}
				break;
			case 10:
				{
				State = 111;
				expression();
				State = 112;
				Match(T__14);
				State = 113;
				statement(0);
				State = 114;
				Match(T__15);
				State = 115;
				statement(2);
				}
				break;
			case 11:
				{
				State = 117;
				Match(T__16);
				State = 118;
				expression();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 125;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StatementContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_statement);
					State = 121;
					if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
					State = 122;
					statement(13);
					}
					} 
				}
				State = 127;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalExpressionContext logicalExpression() {
			return GetRuleContext<LogicalExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			logicalExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext[] equalityExpression() {
			return GetRuleContexts<EqualityExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression(int i) {
			return GetRuleContext<EqualityExpressionContext>(i);
		}
		public LogicalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterLogicalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitLogicalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalExpressionContext logicalExpression() {
		LogicalExpressionContext _localctx = new LogicalExpressionContext(Context, State);
		EnterRule(_localctx, 8, RULE_logicalExpression);
		try {
			int _alt;
			State = 154;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 130;
				equalityExpression();
				State = 135;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 131;
						Match(T__17);
						State = 132;
						equalityExpression();
						}
						} 
					}
					State = 137;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 138;
				equalityExpression();
				State = 143;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 139;
						Match(T__18);
						State = 140;
						equalityExpression();
						}
						} 
					}
					State = 145;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 146;
				equalityExpression();
				State = 151;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 147;
						Match(T__19);
						State = 148;
						equalityExpression();
						}
						} 
					}
					State = 153;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationExpressionContext[] relationExpression() {
			return GetRuleContexts<RelationExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationExpressionContext relationExpression(int i) {
			return GetRuleContext<RelationExpressionContext>(i);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_equalityExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			relationExpression();
			State = 163;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 161;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__20:
						{
						State = 157;
						Match(T__20);
						State = 158;
						relationExpression();
						}
						break;
					case T__21:
						{
						State = 159;
						Match(T__21);
						State = 160;
						relationExpression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 165;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BinaryExpressionContext[] binaryExpression() {
			return GetRuleContexts<BinaryExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryExpressionContext binaryExpression(int i) {
			return GetRuleContext<BinaryExpressionContext>(i);
		}
		public RelationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterRelationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitRelationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationExpressionContext relationExpression() {
		RelationExpressionContext _localctx = new RelationExpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_relationExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			binaryExpression();
			State = 177;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 175;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__22:
						{
						State = 167;
						Match(T__22);
						State = 168;
						binaryExpression();
						}
						break;
					case T__23:
						{
						State = 169;
						Match(T__23);
						State = 170;
						binaryExpression();
						}
						break;
					case T__24:
						{
						State = 171;
						Match(T__24);
						State = 172;
						binaryExpression();
						}
						break;
					case T__25:
						{
						State = 173;
						Match(T__25);
						State = 174;
						binaryExpression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 179;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplyExpressionContext[] multiplyExpression() {
			return GetRuleContexts<MultiplyExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplyExpressionContext multiplyExpression(int i) {
			return GetRuleContext<MultiplyExpressionContext>(i);
		}
		public BinaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterBinaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitBinaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryExpressionContext binaryExpression() {
		BinaryExpressionContext _localctx = new BinaryExpressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_binaryExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			multiplyExpression();
			State = 187;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 185;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__26:
						{
						State = 181;
						Match(T__26);
						State = 182;
						multiplyExpression();
						}
						break;
					case T__27:
						{
						State = 183;
						Match(T__27);
						State = 184;
						multiplyExpression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 189;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplyExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext[] unaryExpression() {
			return GetRuleContexts<UnaryExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression(int i) {
			return GetRuleContext<UnaryExpressionContext>(i);
		}
		public MultiplyExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplyExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterMultiplyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitMultiplyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplyExpressionContext multiplyExpression() {
		MultiplyExpressionContext _localctx = new MultiplyExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_multiplyExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			unaryExpression();
			State = 199;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 197;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__28:
						{
						State = 191;
						Match(T__28);
						State = 192;
						unaryExpression();
						}
						break;
					case T__29:
						{
						State = 193;
						Match(T__29);
						State = 194;
						unaryExpression();
						}
						break;
					case T__30:
						{
						State = 195;
						Match(T__30);
						State = 196;
						unaryExpression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 201;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_unaryExpression);
		int _la;
		try {
			State = 205;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
			case T__31:
				EnterOuterAlt(_localctx, 1);
				{
				State = 202;
				_la = TokenStream.LA(1);
				if ( !(_la==T__27 || _la==T__31) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 203;
				unaryExpression();
				}
				break;
			case T__1:
			case T__4:
			case T__34:
			case ID:
			case Boolean:
			case Integer:
			case Date:
			case Decimal:
			case Text:
			case Schema:
			case Dataset:
			case Mashd:
				EnterOuterAlt(_localctx, 2);
				{
				State = 204;
				postfixExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterPostfixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitPostfixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		PostfixExpressionContext _localctx = new PostfixExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_postfixExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			primaryExpression();
			State = 209;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 208;
				_la = TokenStream.LA(1);
				if ( !(_la==T__32 || _la==T__33) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Boolean() { return GetToken(MashdParser.Boolean, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer() { return GetToken(MashdParser.Integer, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Date() { return GetToken(MashdParser.Date, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Decimal() { return GetToken(MashdParser.Decimal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Text() { return GetToken(MashdParser.Text, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Schema() { return GetToken(MashdParser.Schema, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dataset() { return GetToken(MashdParser.Dataset, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mashd() { return GetToken(MashdParser.Mashd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeyValuePairContext[] keyValuePair() {
			return GetRuleContexts<KeyValuePairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyValuePairContext keyValuePair(int i) {
			return GetRuleContext<KeyValuePairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_primaryExpression);
		int _la;
		try {
			State = 237;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 211;
				identifier();
				}
				break;
			case Boolean:
				EnterOuterAlt(_localctx, 2);
				{
				State = 212;
				Match(Boolean);
				}
				break;
			case Integer:
				EnterOuterAlt(_localctx, 3);
				{
				State = 213;
				Match(Integer);
				}
				break;
			case Date:
				EnterOuterAlt(_localctx, 4);
				{
				State = 214;
				Match(Date);
				}
				break;
			case Decimal:
				EnterOuterAlt(_localctx, 5);
				{
				State = 215;
				Match(Decimal);
				}
				break;
			case Text:
				EnterOuterAlt(_localctx, 6);
				{
				State = 216;
				Match(Text);
				}
				break;
			case Schema:
				EnterOuterAlt(_localctx, 7);
				{
				State = 217;
				Match(Schema);
				}
				break;
			case Dataset:
				EnterOuterAlt(_localctx, 8);
				{
				State = 218;
				Match(Dataset);
				}
				break;
			case Mashd:
				EnterOuterAlt(_localctx, 9);
				{
				State = 219;
				Match(Mashd);
				}
				break;
			case T__34:
				EnterOuterAlt(_localctx, 10);
				{
				State = 220;
				Match(T__34);
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 11);
				{
				State = 221;
				Match(T__4);
				State = 230;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ID) {
					{
					State = 222;
					keyValuePair();
					State = 227;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__35) {
						{
						{
						State = 223;
						Match(T__35);
						State = 224;
						keyValuePair();
						}
						}
						State = 229;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 232;
				Match(T__6);
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 12);
				{
				State = 233;
				Match(T__1);
				State = 234;
				expression();
				State = 235;
				Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyValuePairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public KeyValuePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyValuePair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterKeyValuePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitKeyValuePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyValuePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyValuePairContext keyValuePair() {
		KeyValuePairContext _localctx = new KeyValuePairContext(Context, State);
		EnterRule(_localctx, 24, RULE_keyValuePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			identifier();
			State = 240;
			Match(T__15);
			State = 241;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 26, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 35046933135360L) != 0)) {
				{
				State = 243;
				type();
				State = 244;
				identifier();
				State = 251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__35) {
					{
					{
					State = 245;
					Match(T__35);
					State = 246;
					type();
					State = 247;
					identifier();
					}
					}
					State = 253;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 28, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2296871033254182948L) != 0)) {
				{
				State = 256;
				expression();
				State = 261;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__35) {
					{
					{
					State = 257;
					Match(T__35);
					State = 258;
					expression();
					}
					}
					State = 263;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 30, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 35046933135360L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MashdParser.ID, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMashdListener typedListener = listener as IMashdListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMashdVisitor<TResult> typedVisitor = visitor as IMashdVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 32, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return statement_sempred((StatementContext)_localctx, predIndex);
		}
		return true;
	}
	private bool statement_sempred(StatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 12);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,62,271,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,45,8,0,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,58,8,1,1,2,1,2,1,2,1,2,
		1,2,1,2,5,2,66,8,2,10,2,12,2,69,9,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,3,2,120,8,2,1,2,1,2,5,2,124,8,2,10,2,12,2,127,9,
		2,1,3,1,3,1,4,1,4,1,4,5,4,134,8,4,10,4,12,4,137,9,4,1,4,1,4,1,4,5,4,142,
		8,4,10,4,12,4,145,9,4,1,4,1,4,1,4,5,4,150,8,4,10,4,12,4,153,9,4,3,4,155,
		8,4,1,5,1,5,1,5,1,5,1,5,5,5,162,8,5,10,5,12,5,165,9,5,1,6,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,1,6,5,6,176,8,6,10,6,12,6,179,9,6,1,7,1,7,1,7,1,7,1,7,
		5,7,186,8,7,10,7,12,7,189,9,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,198,8,8,
		10,8,12,8,201,9,8,1,9,1,9,1,9,3,9,206,8,9,1,10,1,10,3,10,210,8,10,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,5,11,
		226,8,11,10,11,12,11,229,9,11,3,11,231,8,11,1,11,1,11,1,11,1,11,1,11,3,
		11,238,8,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,5,13,250,
		8,13,10,13,12,13,253,9,13,3,13,255,8,13,1,14,1,14,1,14,5,14,260,8,14,10,
		14,12,14,263,9,14,3,14,265,8,14,1,15,1,15,1,16,1,16,1,16,0,1,4,17,0,2,
		4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,0,3,2,0,28,28,32,32,1,0,33,34,
		1,0,37,44,304,0,44,1,0,0,0,2,57,1,0,0,0,4,119,1,0,0,0,6,128,1,0,0,0,8,
		154,1,0,0,0,10,156,1,0,0,0,12,166,1,0,0,0,14,180,1,0,0,0,16,190,1,0,0,
		0,18,205,1,0,0,0,20,207,1,0,0,0,22,237,1,0,0,0,24,239,1,0,0,0,26,254,1,
		0,0,0,28,264,1,0,0,0,30,266,1,0,0,0,32,268,1,0,0,0,34,35,5,1,0,0,35,36,
		5,48,0,0,36,45,3,0,0,0,37,38,3,2,1,0,38,39,3,0,0,0,39,45,1,0,0,0,40,41,
		3,4,2,0,41,42,3,0,0,0,42,45,1,0,0,0,43,45,5,0,0,1,44,34,1,0,0,0,44,37,
		1,0,0,0,44,40,1,0,0,0,44,43,1,0,0,0,45,1,1,0,0,0,46,47,3,30,15,0,47,48,
		3,32,16,0,48,49,5,2,0,0,49,50,3,26,13,0,50,51,5,3,0,0,51,58,1,0,0,0,52,
		53,3,30,15,0,53,54,3,32,16,0,54,55,5,4,0,0,55,56,3,6,3,0,56,58,1,0,0,0,
		57,46,1,0,0,0,57,52,1,0,0,0,58,3,1,0,0,0,59,60,6,2,-1,0,60,67,5,5,0,0,
		61,62,3,30,15,0,62,63,3,32,16,0,63,64,5,6,0,0,64,66,1,0,0,0,65,61,1,0,
		0,0,66,69,1,0,0,0,67,65,1,0,0,0,67,68,1,0,0,0,68,70,1,0,0,0,69,67,1,0,
		0,0,70,71,3,4,2,0,71,72,5,7,0,0,72,120,1,0,0,0,73,74,3,32,16,0,74,75,5,
		4,0,0,75,76,3,6,3,0,76,120,1,0,0,0,77,78,3,32,16,0,78,79,5,8,0,0,79,80,
		3,6,3,0,80,120,1,0,0,0,81,82,3,32,16,0,82,83,5,9,0,0,83,84,3,6,3,0,84,
		120,1,0,0,0,85,86,3,32,16,0,86,87,5,10,0,0,87,88,3,6,3,0,88,120,1,0,0,
		0,89,90,3,32,16,0,90,91,5,11,0,0,91,92,3,6,3,0,92,120,1,0,0,0,93,94,3,
		32,16,0,94,95,5,12,0,0,95,96,3,6,3,0,96,120,1,0,0,0,97,98,5,13,0,0,98,
		99,5,2,0,0,99,100,3,6,3,0,100,101,5,3,0,0,101,102,3,4,2,4,102,120,1,0,
		0,0,103,104,5,13,0,0,104,105,5,2,0,0,105,106,3,6,3,0,106,107,5,3,0,0,107,
		108,3,4,2,0,108,109,5,14,0,0,109,110,3,4,2,3,110,120,1,0,0,0,111,112,3,
		6,3,0,112,113,5,15,0,0,113,114,3,4,2,0,114,115,5,16,0,0,115,116,3,4,2,
		2,116,120,1,0,0,0,117,118,5,17,0,0,118,120,3,6,3,0,119,59,1,0,0,0,119,
		73,1,0,0,0,119,77,1,0,0,0,119,81,1,0,0,0,119,85,1,0,0,0,119,89,1,0,0,0,
		119,93,1,0,0,0,119,97,1,0,0,0,119,103,1,0,0,0,119,111,1,0,0,0,119,117,
		1,0,0,0,120,125,1,0,0,0,121,122,10,12,0,0,122,124,3,4,2,13,123,121,1,0,
		0,0,124,127,1,0,0,0,125,123,1,0,0,0,125,126,1,0,0,0,126,5,1,0,0,0,127,
		125,1,0,0,0,128,129,3,8,4,0,129,7,1,0,0,0,130,135,3,10,5,0,131,132,5,18,
		0,0,132,134,3,10,5,0,133,131,1,0,0,0,134,137,1,0,0,0,135,133,1,0,0,0,135,
		136,1,0,0,0,136,155,1,0,0,0,137,135,1,0,0,0,138,143,3,10,5,0,139,140,5,
		19,0,0,140,142,3,10,5,0,141,139,1,0,0,0,142,145,1,0,0,0,143,141,1,0,0,
		0,143,144,1,0,0,0,144,155,1,0,0,0,145,143,1,0,0,0,146,151,3,10,5,0,147,
		148,5,20,0,0,148,150,3,10,5,0,149,147,1,0,0,0,150,153,1,0,0,0,151,149,
		1,0,0,0,151,152,1,0,0,0,152,155,1,0,0,0,153,151,1,0,0,0,154,130,1,0,0,
		0,154,138,1,0,0,0,154,146,1,0,0,0,155,9,1,0,0,0,156,163,3,12,6,0,157,158,
		5,21,0,0,158,162,3,12,6,0,159,160,5,22,0,0,160,162,3,12,6,0,161,157,1,
		0,0,0,161,159,1,0,0,0,162,165,1,0,0,0,163,161,1,0,0,0,163,164,1,0,0,0,
		164,11,1,0,0,0,165,163,1,0,0,0,166,177,3,14,7,0,167,168,5,23,0,0,168,176,
		3,14,7,0,169,170,5,24,0,0,170,176,3,14,7,0,171,172,5,25,0,0,172,176,3,
		14,7,0,173,174,5,26,0,0,174,176,3,14,7,0,175,167,1,0,0,0,175,169,1,0,0,
		0,175,171,1,0,0,0,175,173,1,0,0,0,176,179,1,0,0,0,177,175,1,0,0,0,177,
		178,1,0,0,0,178,13,1,0,0,0,179,177,1,0,0,0,180,187,3,16,8,0,181,182,5,
		27,0,0,182,186,3,16,8,0,183,184,5,28,0,0,184,186,3,16,8,0,185,181,1,0,
		0,0,185,183,1,0,0,0,186,189,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,
		15,1,0,0,0,189,187,1,0,0,0,190,199,3,18,9,0,191,192,5,29,0,0,192,198,3,
		18,9,0,193,194,5,30,0,0,194,198,3,18,9,0,195,196,5,31,0,0,196,198,3,18,
		9,0,197,191,1,0,0,0,197,193,1,0,0,0,197,195,1,0,0,0,198,201,1,0,0,0,199,
		197,1,0,0,0,199,200,1,0,0,0,200,17,1,0,0,0,201,199,1,0,0,0,202,203,7,0,
		0,0,203,206,3,18,9,0,204,206,3,20,10,0,205,202,1,0,0,0,205,204,1,0,0,0,
		206,19,1,0,0,0,207,209,3,22,11,0,208,210,7,1,0,0,209,208,1,0,0,0,209,210,
		1,0,0,0,210,21,1,0,0,0,211,238,3,32,16,0,212,238,5,53,0,0,213,238,5,54,
		0,0,214,238,5,55,0,0,215,238,5,56,0,0,216,238,5,57,0,0,217,238,5,58,0,
		0,218,238,5,59,0,0,219,238,5,60,0,0,220,238,5,35,0,0,221,230,5,5,0,0,222,
		227,3,24,12,0,223,224,5,36,0,0,224,226,3,24,12,0,225,223,1,0,0,0,226,229,
		1,0,0,0,227,225,1,0,0,0,227,228,1,0,0,0,228,231,1,0,0,0,229,227,1,0,0,
		0,230,222,1,0,0,0,230,231,1,0,0,0,231,232,1,0,0,0,232,238,5,7,0,0,233,
		234,5,2,0,0,234,235,3,6,3,0,235,236,5,3,0,0,236,238,1,0,0,0,237,211,1,
		0,0,0,237,212,1,0,0,0,237,213,1,0,0,0,237,214,1,0,0,0,237,215,1,0,0,0,
		237,216,1,0,0,0,237,217,1,0,0,0,237,218,1,0,0,0,237,219,1,0,0,0,237,220,
		1,0,0,0,237,221,1,0,0,0,237,233,1,0,0,0,238,23,1,0,0,0,239,240,3,32,16,
		0,240,241,5,16,0,0,241,242,3,6,3,0,242,25,1,0,0,0,243,244,3,30,15,0,244,
		251,3,32,16,0,245,246,5,36,0,0,246,247,3,30,15,0,247,248,3,32,16,0,248,
		250,1,0,0,0,249,245,1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,251,252,1,
		0,0,0,252,255,1,0,0,0,253,251,1,0,0,0,254,243,1,0,0,0,254,255,1,0,0,0,
		255,27,1,0,0,0,256,261,3,6,3,0,257,258,5,36,0,0,258,260,3,6,3,0,259,257,
		1,0,0,0,260,263,1,0,0,0,261,259,1,0,0,0,261,262,1,0,0,0,262,265,1,0,0,
		0,263,261,1,0,0,0,264,256,1,0,0,0,264,265,1,0,0,0,265,29,1,0,0,0,266,267,
		7,2,0,0,267,31,1,0,0,0,268,269,5,45,0,0,269,33,1,0,0,0,26,44,57,67,119,
		125,135,143,151,154,161,163,175,177,185,187,197,199,205,209,227,230,237,
		251,254,261,264
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
