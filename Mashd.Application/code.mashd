Schema peopleSchema = {
  id: {
    type: Integer,
    name: "ID"
  },
  firstName: {
    type: Text,
    name: "FirstName"
  },
  lastName: {
    type: Text,
    name: "LastName"
  }
};

Dataset left = {
  adapter: "csv",
  schema: peopleSchema,
  source: "data.csv",
  delimiter: ";"
};

Dataset right = {
  adapter: "csv",
  schema: peopleSchema,
  source: "data.csv",
  delimiter: ";"
};

Mashd combined = left & right;

Boolean compareNames(Text leftName, Text rightName) {
  return leftName == rightName;
}

Text fullName(Text firstName, Text lastName) {
  return firstName + " " + lastName;
}

combined
  .match(left.id, right.id)
  .fuzzyMatch(left.firstName, right.firstName, 0.85)
  .functionMatch(compareNames, left.lastName, right.lastName)
  .transform({
    id: left.id ?? right.id,
    fullName: fullName(left.firstName, left.lastName) ?? "test",
    firstName: left.firstName ?? right.firstName,
    lastName: left.lastName ?? right.lastName
  });

Dataset mergedData = combined.union();

mergedData.toFile("merged_output.csv");

/*
Dataset operationData = {
  adapter: "csv",
  schema: operationSchema,
  source: "../patientdata/operations.csv",
  delimiter: ","
};

Dataset patientData = {
  adapter: "postgresql",
  schema: patientSchema,
  source: "postgresql://supervisor1:secretpassword123@localhost:5432/patientdata",
  query: "SELECT * FROM patients"
};

Text combinedFullname(Text firstName, Text lastName) {
  return firstName + " " + lastName;
}

Date toISODate(Text date) {
  return Date.parse(date, "MM-dd-yyyy");
}

Boolean ageBirthYearMatch(Integer birthYear, Integer age) {
  Integer estimatedBirthYear = 2023 - age;
  Integer tolerance = 1;
  Boolean match = false;

  if (birthYear == estimatedBirthYear) {
    match = true;
  } else if (birthYear == estimatedBirthYear - tolerance) {
    match = true;
  } else if (birthYear == estimatedBirthYear + tolerance) {
    match = true;
  }

  return match;
}

Mashd name = patientData & operationData;

Decimal threshold = 0.85;

name
  .match(patientData.vaccinated, operationData.vaccinated)
  .fuzzyMatch(patientData.lastName, operationData.patientName, threshold)
  .functionMatch(ageBirthYearMatch, patientData.birthYear, operationData.age)
  .transform({
    id: patientData.patientId,
    name: combinedFullname(patientData.firstName, patientData.lastName),
    operationId: operationData.operationId,
    operationType: operationData.operationType,
    operationDate: toISODate(operationData.date)
  });

Dataset mergedDataSet = name.join();
mergedDataSet.toFile("merged_output.csv");
*/