Schema operationSchema = {
  operationId: {
    type: Integer,
    name: "Operation-ID"
  },
  patientName: {
    type: Text,
    name: "Patient-Name"
  },
  operationType: {
    type: Text,
    name: "Operation-Name"
  },
  date: {
    type: Text,
    name: "Date"
  },
  age: {
    type: Integer,
    name: "Age"
  },
  vaccinated: {
    type: Boolean,
    name: "Confirmed-Vaccine"
  }
};

Dataset operationData = {
  adapter: "csv",
  schema: operationSchema,
  source: "../patientdata/operations.csv",
  delimiter: ","
};

Dataset patientData = {
  adapter: "postgresql",
  schema: patientSchema,
  source: "postgresql://supervisor1:secretpassword123@localhost:5432/patientdata",
  query: "SELECT * FROM patients"
};

Text combinedFullname(Text firstName, Text lastName) {
  return firstName + " " + lastName;
}

Date toISODate(Text date) {
  return Date.parse(date, "MM-dd-yyyy");
}

Boolean ageBirthYearMatch(Integer birthYear, Integer age) {
  Integer estimatedBirthYear = 2023 - age;
  Integer tolerance = 1;
  Boolean match = false;

  if (birthYear == estimatedBirthYear) {
    match = true;
  } else if (birthYear == estimatedBirthYear - tolerance) {
    match = true;
  } else if (birthYear == estimatedBirthYear + tolerance) {
    match = true;
  }

  return match;
}

Mashd name = patientData & operationData;

Decimal threshold = 0.85;

name
  .match(patientData.vaccinated, operationData.vaccinated)
  .fuzzyMatch(combinedFullname(patientData.firstName, patientData.lastName), operationData.patientName, threshold)
  .functionMatch(ageBirthYearMatch, patientData.birthYear, operationData.age)
  .transform({
    id: patientData.patientId,
    name: combinedFullname(patientData.firstName, patientData.lastName),
    operationId: operationData.operationId,
    operationType: operationData.operationType,
    operationDate: toISODate(operationData.date)
  });

Dataset mergedDataSet = name.join();
mergedDataSet.toFile("merged_output.csv");
